{
    "version": "https://jsonfeed.org/version/1",
    "title": "汐月也自闭了的个人博客 • All posts by \"nodejs\" category",
    "description": "这个需求写不了",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/27/nodeJS/%E8%AE%BE%E7%BD%AE%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/",
            "url": "http://example.com/2023/05/27/nodeJS/%E8%AE%BE%E7%BD%AE%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/",
            "title": "设置图形验证码",
            "date_published": "2023-05-27T02:21:10.851Z",
            "content_html": "<h2 id=\"所需知识\"><a class=\"markdownIt-Anchor\" href=\"#所需知识\">#</a> 所需知识</h2>\n<h3 id=\"svg-captcha\"><a class=\"markdownIt-Anchor\" href=\"#svg-captcha\">#</a> svg-captcha</h3>\n<p>一个图形验证码的第三方包</p>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i svg-captcha</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h3>\n<h4 id=\"svgcaptchacreateoptions\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptchacreateoptions\">#</a>  <code>svgCaptcha.create(options)</code></h4>\n<p>如果没有传递任何选项，您将获得一个由四个字符组成的随机字符串和相应的 svg。</p>\n<ul>\n<li><code>size</code> ： 4 // 随机字符串的大小</li>\n<li><code>ignoreChars</code> ： ‘0o1i’ // 过滤掉一些字符，如 0o1i</li>\n<li><code>noise</code> ： 1 // 噪声线数</li>\n<li><code>color</code> ：true // 字符将具有不同的颜色而不是灰色，如果设置了背景选项，则为 true。</li>\n<li><code>background</code> ： ‘#cc9966’ // SVG 图像的背景颜色</li>\n</ul>\n<p>此函数返回具有以下属性的对象：</p>\n<ul>\n<li><code>data</code> ： 字符串 // SVG 路径数据</li>\n<li><code>text</code> ：字符串 // 验证码文本</li>\n</ul>\n<h4 id=\"svgcaptchacreatemathexproptions\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptchacreatemathexproptions\">#</a>  <code>svgCaptcha.createMathExpr(options)</code></h4>\n<p>与创建 API 类似，您有上述选项以及 3 个附加选项：</p>\n<ul>\n<li><code>mathMin</code> ： 1 // 数学表达式可以为的最小值</li>\n<li><code>mathMax</code> ： 9 // 数学表达式的最大值</li>\n<li><code>mathOperator</code> ： + // 要使用的运算符，或（表示随机或 <code>+``-``+-``+``-</code> )</li>\n</ul>\n<p>此函数返回具有以下属性的对象：</p>\n<ul>\n<li><code>data</code> ：数学表达式的字符串 // SVG</li>\n<li><code>text</code> ： 字符串 // 数学表达式的答案</li>\n</ul>\n<h4 id=\"svgcaptchaloadfonturl\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptchaloadfonturl\">#</a>  <code>svgCaptcha.loadFont(url)</code></h4>\n<p>加载您自己的字体并覆盖默认字体。</p>\n<ul>\n<li><code>url</code> ：字符串 // 字体的路径 这个 api 是 opentype.js 的 loadFont api 的包装器。<br>\n您可能需要尝试各种选项，以使您自己的字体可访问。<br>\n请参阅以下 API。</li>\n</ul>\n<h4 id=\"svgcaptchaoptions\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptchaoptions\">#</a>  <code>svgCaptcha.options</code></h4>\n<p>获取对全局设置对象的访问权限。 它用于创建和创建 MathExpr api 作为默认选项。</p>\n<p>除了大小、杂色、颜色和背景之外，还可以设置以下属性：</p>\n<ul>\n<li><code>width</code> ： 数字 // 验证码宽度</li>\n<li><code>height</code> ： 数字 // 验证码的高度</li>\n<li><code>fontSize</code> ： 数字 // 验证码文本大小</li>\n<li><code>charPreset</code> ：字符串 // 随机字符预设</li>\n</ul>\n<h4 id=\"svgcaptcharandomtextsizeoptions\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptcharandomtextsizeoptions\">#</a>  <code>svgCaptcha.randomText([size|options])</code></h4>\n<p>返回一个随机字符串。</p>\n<h4 id=\"svgcaptchatext-options\"><a class=\"markdownIt-Anchor\" href=\"#svgcaptchatext-options\">#</a>  <code>svgCaptcha(text, options)</code></h4>\n<p>根据提供的文本返回 SVG 验证码。</p>\n<p>在 1.1.0 之前的版本中，您必须调用这两个函数，<br>\n现在您可以调用 create（） 来保存一些击键；)。</p>\n<h3 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\">#</a> 案例</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> svgcaptcha = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;svg-captcha&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建服务器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    服务器中的代码对于外部都是不可见的</span></span><br><span class=\"line\"><span class=\"comment\">所以如果希望浏览器可以访问，则要将页面设置静态资源</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"comment\">//设置static中间件后，浏览器访问时，会自动去public目录下寻找是否有匹配的静态资源</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./public&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/captcha&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> captcha = svgcaptcha.<span class=\"title function_\">create</span>()</span><br><span class=\"line\"><span class=\"comment\">// captcha格式 &#123;data: &#x27;&lt;svg.../svg&gt;&#x27;, text: &#x27;abcd&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 其中data 就是图形验证码了,text则是要验证的内容</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(captcha.<span class=\"property\">data</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已启动~&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "url": "http://example.com/2023/05/27/nodeJS/%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "title": "模块化",
            "date_published": "2023-05-27T02:21:10.847Z",
            "content_html": "<p>在 node 中，默认支持的模块化规范叫做 CommonJS</p>\n<p>在 CommonJS 中一个 js 文件就是一个模块</p>\n<h3 id=\"commonjs规范\"><a class=\"markdownIt-Anchor\" href=\"#commonjs规范\">#</a> CommonJS 规范：</h3>\n<p>​\t- 引入模块</p>\n<p>使用 <code>require(“模块的路径”)</code>  函数来引入模块</p>\n<p>模块名要以 <code>./</code>  或 <code>../</code>  开头</p>\n<p>在定义模块时，模块中的内容默认是不能被外部看到的</p>\n<p>可以通过 <code>exports</code>  来设置要向外部暴露的内容</p>\n<p><code>module.exports</code>  同时导出多个值</p>\n<p>​\t- 引入核心模块</p>\n<p><code>require(&quot;核心模块名字&quot;)</code></p>\n<p>cjs 为扩展名，表示是一个 CommonJS 模块</p>\n<p>也可以用文件夹作为一个模块， <code>require(&quot;./文件名&quot;)</code></p>\n<p>所以 CommonJS 的模块都会包装到一个函数中</p>\n<p>（function（exports，require，module，_ _filename,__dirname）{</p>\n<p>}）</p>\n<p>默认 node 中的模块化标准是 CommonJS</p>\n<h3 id=\"要变成es模块有两种方法\"><a class=\"markdownIt-Anchor\" href=\"#要变成es模块有两种方法\">#</a> 要变成 ES 模块，有两种方法：</h3>\n<p>1. 文件后缀名为.mjs</p>\n<p>2. 创建 package.json 文件，修改 type 属性为 module</p>\n<h3 id=\"es模块化\"><a class=\"markdownIt-Anchor\" href=\"#es模块化\">#</a> ES 模块化：</h3>\n<p>通过 export 导出变量</p>\n<p><code>export let a  = 10</code></p>\n<p>导入用 import</p>\n<p><code>import &quot;./m3.mjs&quot;</code></p>\n<p>es 模块不能省略扩展名</p>\n<p>导入值  import {a,b} from “./m3.mjs”</p>\n<p>import {a as m,b} from “./m3.mjs”</p>\n<p>as 把 a 名字改成 m，a 就不能用了</p>\n<p>import * as m4 from “./m3.mjs”</p>\n<p>* 表示导入所有，以对象形式，并且改名为 m4</p>\n<p>// 设置默认导出</p>\n<p>export default function sum(a,b) {</p>\n<p>return a + b</p>\n<p>}</p>\n<p>// 导入默认导出，默认导出内容可以随便起名，一个模块只有一个默认导出</p>\n<p>import asd from “./m3.mjs”</p>\n<p>// 可以同时导出</p>\n<p>import asd,{a,b} from “./m3.mjs”</p>\n<h5 id=\"通过es模块化导入的都是常量constes模块运行在严格模式下\"><a class=\"markdownIt-Anchor\" href=\"#通过es模块化导入的都是常量constes模块运行在严格模式下\">#</a> 通过 ES 模块化导入的都是常量（const），es 模块运行在严格模式下</h5>\n<h2 id=\"核心模块\"><a class=\"markdownIt-Anchor\" href=\"#核心模块\">#</a> 核心模块</h2>\n<p>node 中自带的模块，可以在 node 中直接使用</p>\n<p>global 是 node 中的全局对象，作用类似于 window</p>\n<p>ES 标准下，全局对象的标准名 globalThis</p>\n<h3 id=\"process\"><a class=\"markdownIt-Anchor\" href=\"#process\">#</a> Process</h3>\n<p>表示当前 node 的进程</p>\n<p>通过该对象可以获取进程的信息，或者对进程做各种操作</p>\n<p>process.exit ()  结束当前进程</p>\n<p>process.nextTick (callback)  将函数插入到 tick 队列中</p>\n<p>代码执行顺序：</p>\n<p>调用栈</p>\n<p>tick 队列，会在微任务队列和宏任务队列中任务之前执行</p>\n<p>微任务队列</p>\n<p>宏任务队列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;process&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"path\"><a class=\"markdownIt-Anchor\" href=\"#path\">#</a> Path</h3>\n<p>表示的路径</p>\n<p>通过 path 可以获取各种路径</p>\n<p><code>path.resolve([...paths]) </code> 生成一个绝对路径</p>\n<p>如果直接调用 resolve 会直接返回当前的工作目录</p>\n<p>如果将相对路径作为参数，则 resolve 会自动将其转换为绝对路径</p>\n<p>根据工作目录不同，产生的绝对路径不同。</p>\n<p>所以一般会将一个绝对路径作为第一个参数，一个相对路径作为第二个参数</p>\n<p>这样他会自动计算出对应的路径，但是这样也不推荐，因为换绝对路径就会报错</p>\n<p><strong>最终</strong></p>\n<p>path.resolve(__dirname,&quot;./m5.js&quot;)</p>\n<p>前面用__dirname 可以直接获取绝对路径，再加上后面的路径。</p>\n<p>而且在任何方式去获取路径获取的都是一样的。</p>\n<h3 id=\"fs\"><a class=\"markdownIt-Anchor\" href=\"#fs\">#</a> fs</h3>\n<p>用来帮助 node 操作磁盘中的文件</p>\n<p>文件操作也就是所谓的 I/O 操作，input output</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"property\">readFileSync</span>（路径）同步读取文件的方法，会阻塞后面代码的执行</span><br></pre></td></tr></table></figure>\n<p>当我们通过 fs 模块读取磁盘中的对象时，读取到的数据总以 Buffer 对象的形式返回</p>\n<p>Buffer 是一个临时用来存储数据的缓冲区</p>\n<p><code>fs.readFile(路径，回调函数)</code>  异步读取文件的方法</p>\n<p>数据会以函数的参数传进来，它有两个参数</p>\n<p><code>(err,buffer)=&gt;&#123;&#125;</code></p>\n<p>错误信息会传进第一个参数，没用则是 null</p>\n<p>否则会传进 buffer 中。</p>\n<p>这个方法不会阻塞后续代码的执行，但是用到了回调函数</p>\n<p>所以我们 <code>require(&quot;fs/promises&quot;)</code></p>\n<p>获取 promise 版本的 fs</p>\n<p>fs.readFile (路径)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buf = fs.<span class=\"title function_\">readFile</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./m2.js&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;出错了&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者用 async</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> buf = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readFile</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./m2.js&quot;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>fs.appendFile(路径，写进去的数据)</code>  创建新文件，或者将数据添加到已有文件中</p>\n<p>返回值为 undefined</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.appendFile(path.resolve(__dirname,&quot;./fs创建的.js&quot;),&quot;我是被m5中fs创建的&quot;)</span><br></pre></td></tr></table></figure>\n<p><code>fs.mkdir(路径) </code> 创建目录</p>\n<p><code>mkdir</code>  可以接收一个配置对象作为第二个参数，通过该对象，可以对方法的功能进行配置</p>\n<p><code>recursive</code>  默认 false，设置为 true 后，自动创建不存在的上一级目录</p>\n<p><code>&#123;recursive:true&#125;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node:fs/promises&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node:path&quot;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">mkdir</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./creatFS&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>fs.rmdir(路径)</code>  删除目录</p>\n<p><code>recursive</code>  对 rmdir 也同理</p>\n<p><code>fs.rm() </code> 删除文件</p>\n<p><code>fs.rename(旧名路径，新名路径)</code>  重命名（实际是剪切，可以移位置）</p>\n<p><code>fs.copyFile(复制文件路径，转移路径)</code>  复制文件</p>\n<p><code>fs.writeFile(文件路径，写入值) </code> 重写文件</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/REST%E5%92%8CAJAX/",
            "url": "http://example.com/2023/05/27/nodeJS/REST%E5%92%8CAJAX/",
            "title": "rest和ajax",
            "date_published": "2023-05-27T02:21:10.844Z",
            "content_html": "<h2 id=\"rest\"><a class=\"markdownIt-Anchor\" href=\"#rest\">#</a> REST</h2>\n<p>REST 表示层状态的传输</p>\n<p>请求的方法：</p>\n<p>GET 加载数据</p>\n<p>POST 新建或添加数据</p>\n<p>PUT 添加或修改数据</p>\n<p>PATCH 修改数据</p>\n<p>DELETE 删除数据</p>\n<p>OPTION 由浏览器自动发送，检查请求的一些权限</p>\n<p>API (接口)    Endpoint (端点)</p>\n<p>postman 是一个软件，可以向服务器发送各种请求，帮助我们测试 API</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">STU_ARR</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;孙悟空&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>:<span class=\"string\">&quot;花果山&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">&quot;2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;猪八戒&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>:<span class=\"string\">&quot;高老庄&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">&quot;3&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;沙和尚&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>:<span class=\"string\">&quot;流沙河&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中间件</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">urlencoded</span>())</span><br><span class=\"line\"><span class=\"comment\">//解析JSON</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">json</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义学生信息相关路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/students&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到get&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//返回学生信息</span></span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">result</span>:<span class=\"variable constant_\">STU_ARR</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询学生信息路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/students/:id&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> stu = <span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">id</span> == id)</span><br><span class=\"line\">  <span class=\"comment\">//返回</span></span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:stu</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加学生的路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/students&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到post&quot;</span>,req.<span class=\"property\">body</span>);</span><br><span class=\"line\">  <span class=\"comment\">//获取学生信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;name,age,gender,address&#125; = req.<span class=\"property\">body</span></span><br><span class=\"line\">  <span class=\"comment\">//创建学生信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> stu = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:+<span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">at</span>(-<span class=\"number\">1</span>).<span class=\"property\">id</span> + <span class=\"number\">1</span> + <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:+age,</span><br><span class=\"line\">    gender,</span><br><span class=\"line\">    address</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将学生信息添加到数组</span></span><br><span class=\"line\">  <span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:+<span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">at</span>(-<span class=\"number\">1</span>).<span class=\"property\">id</span> + <span class=\"number\">1</span> + <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:+age,</span><br><span class=\"line\">    gender,</span><br><span class=\"line\">    address</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">//添加成功</span></span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">result</span>:stu</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除学生信息的路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;/students/:id&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取id</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"variable constant_\">STU_ARR</span>.<span class=\"property\">length</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable constant_\">STU_ARR</span>[i].<span class=\"property\">id</span> == id) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> delStu = <span class=\"variable constant_\">STU_ARR</span>[i]</span><br><span class=\"line\">      <span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">splice</span>(i,<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">//数据删除成功</span></span><br><span class=\"line\">      res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">status</span>:<span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>:delStu</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//如果执行到这里，说明学生不存在</span></span><br><span class=\"line\">  res.<span class=\"title function_\">status</span>(<span class=\"number\">404</span>).<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>:<span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"string\">&quot;学生id不存在&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改学生的路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">put</span>(<span class=\"string\">&quot;/students&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;id,name,age,gender,address&#125; = req.<span class=\"property\">body</span></span><br><span class=\"line\">  <span class=\"comment\">//根据id查询学生</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> updateStu = <span class=\"variable constant_\">STU_ARR</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">id</span> == id)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(updateStu) &#123;</span><br><span class=\"line\">    updateStu.<span class=\"property\">name</span> = name,</span><br><span class=\"line\">    updateStu.<span class=\"property\">age</span> = age,</span><br><span class=\"line\">    updateStu.<span class=\"property\">gender</span> = gender,</span><br><span class=\"line\">    updateStu.<span class=\"property\">address</span> = address</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>:<span class=\"string\">&quot;ok&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>:updateStu</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">404</span>).<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>:<span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>:<span class=\"string\">&quot;学生不存在&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已经启动&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ajax\"><a class=\"markdownIt-Anchor\" href=\"#ajax\">#</a> AJAX</h2>\n<p>在 js 中，发送请求加载数据的技术叫 AJAX</p>\n<p>​     AJAX</p>\n<p>​      -A 异步 J JavaScript A and X XML</p>\n<p>​      - 作用：通过 js 向服务器发送请求加载数据</p>\n<p>​      - 可选择发送请求的方案:</p>\n<p>​      1 XMLHTTPRequest (xhr) 基本淘汰</p>\n<p>​      2 Fetch</p>\n<p>​      3 Axios</p>\n<h2 id=\"xhr\"><a class=\"markdownIt-Anchor\" href=\"#xhr\">#</a> xhr</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;h1&gt;AJAX测试&lt;/h1&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;button id=&quot;btn&quot;&gt;点我加载数据&lt;/button&gt;</span><br><span class=\"line\">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    const btn = document.querySelector(&quot;#btn&quot;)</span><br><span class=\"line\">    const root = document.querySelector(&quot;#root&quot;)</span><br><span class=\"line\">    btn.onclick = () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      //创建xhr对象</span><br><span class=\"line\">      const xhr = new XMLHttpRequest()</span><br><span class=\"line\">      //为xhr对象绑定load事件</span><br><span class=\"line\">      xhr.onload = () =&gt; &#123;</span><br><span class=\"line\">        //xhr.status 是 响应状态码</span><br><span class=\"line\">        if(xhr.status == 200)&#123;</span><br><span class=\"line\">          //读取响应信息</span><br><span class=\"line\">          //把JSON转换</span><br><span class=\"line\">          const stuList = JSON.parse(xhr.response)//或者通过xhr.responseType = &quot;JSON&quot;</span><br><span class=\"line\">      //xhr.response表示响应信息</span><br><span class=\"line\">      console.log(stuList);</span><br><span class=\"line\">          if(stuList.status == &quot;ok&quot;) &#123;</span><br><span class=\"line\">            const ul = document.createElement(&quot;ul&quot;)</span><br><span class=\"line\">            root.appendChild(ul)</span><br><span class=\"line\">            for(let stu of stuList.result) &#123;</span><br><span class=\"line\">              root.insertAdjacentHTML(&quot;beforeend&quot;,&quot;&lt;li&gt;&quot; + stu.id + stu.name</span><br><span class=\"line\">                + stu.age + stu.gender + stu.address +&quot;&lt;/li&gt;&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      //设置请求信息</span><br><span class=\"line\">      xhr.open(&quot;GET&quot;,&quot;http://localhost:3000/students&quot;)</span><br><span class=\"line\">      //发送请求</span><br><span class=\"line\">      xhr.send()</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"fetch\"><a class=\"markdownIt-Anchor\" href=\"#fetch\">#</a> fetch</h2>\n<p>fetch 是 xhr 的升级版，采用 promise API</p>\n<p>作用和 AJAX 一样，但使用起来更加友好</p>\n<p>fetch 是原生 js 就支持的一种方式</p>\n<p>fetch (“请求路径”, 配置对象 {</p>\n<p>​\tmethod:“get”, // 发送方式</p>\n<p>headers:{// 请求头</p>\n<p>“Content-type”:“application/json”</p>\n<p>},</p>\n<p>// 通过 body 发送数据时，必须通过请求头确定数据类型</p>\n<p>body:JSON.stringify ({}) // 请求体，给服务器添加什么数据</p>\n<p>})</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    table&#123;</span><br><span class=\"line\">      border-collapse: collapse;</span><br><span class=\"line\">      width:50%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    td, th&#123;</span><br><span class=\"line\">      font-size: 20px;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      border: 1px solid #000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    caption&#123;</span><br><span class=\"line\">      font-size: 30px;</span><br><span class=\"line\">      font-weight: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=&quot;root&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;请登入以后再做操作&lt;/h1&gt;</span><br><span class=\"line\">  &lt;form&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;password&quot; id=&quot;password&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;button id=&quot;btn&quot; type=&quot;button&quot;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">  &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    function loadData() &#123;</span><br><span class=\"line\">      const token = localStorage.getItem(&quot;token&quot;)</span><br><span class=\"line\">      fetch(&quot;http://localhost:3000/students&quot;,&#123;</span><br><span class=\"line\">        method:&quot;get&quot;,</span><br><span class=\"line\">        headers:&#123;</span><br><span class=\"line\">          //Bearer xxxx</span><br><span class=\"line\">          &quot;authorization&quot;:&quot;Bearer &quot; + token</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(res =&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(res.status === 200) &#123;</span><br><span class=\"line\">          //res.json() 读取json格式数据</span><br><span class=\"line\">          return res.json()</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          throw new Error(&quot;请求加载失败&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125;).then(res=&gt;&#123;</span><br><span class=\"line\">        //获取到数据</span><br><span class=\"line\">        const data = document.querySelector(&quot;#data&quot;)</span><br><span class=\"line\">        if(res.status == &quot;ok&quot;) &#123;</span><br><span class=\"line\">          const table = document.createElement(&quot;table&quot;)</span><br><span class=\"line\">          data.appendChild(table)</span><br><span class=\"line\">          table.insertAdjacentHTML(&quot;beforeend&quot;,&quot;&lt;caption&gt;学生列表&lt;/caption&gt;&quot;)</span><br><span class=\"line\">          table.insertAdjacentHTML(&quot;beforeend&quot;,&#x27;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;学号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;地址&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">          const tbody = document.createElement(&quot;tbody&quot;)</span><br><span class=\"line\">          table.appendChild(tbody)</span><br><span class=\"line\">          for(let stu of res.result) &#123;</span><br><span class=\"line\">            table.insertAdjacentHTML(&quot;beforeend&quot;,&quot;&lt;tr&gt;&quot; + &quot;&lt;th&gt;&quot; + stu.id + &quot;&lt;/th&gt;&quot; +</span><br><span class=\"line\">              &quot;&lt;th&gt;&quot; + stu.name + &quot;&lt;/th&gt;&quot; + &quot;&lt;th&gt;&quot; + stu.age + &quot;&lt;/th&gt;&quot; + &quot;&lt;th&gt;&quot; + stu.address + &quot;&lt;/th&gt;&quot; + &quot;&lt;/tr&gt;&quot;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">        console.log(&quot;出错了&quot;,err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    const root = document.querySelector(&quot;#root&quot;)</span><br><span class=\"line\">    //点击btn后实现登录功能</span><br><span class=\"line\">    const btn = document.querySelector(&quot;#btn&quot;)</span><br><span class=\"line\">    console.log();</span><br><span class=\"line\">    if(localStorage.getItem(&quot;token&quot;)) &#123;</span><br><span class=\"line\">      //用户已经登录</span><br><span class=\"line\">      root.innerHTML = &quot;&lt;h1&gt;欢迎&quot; + localStorage.getItem(&quot;nickname&quot;) + &#x27;&lt;/h1&gt; &lt;button id=&quot;bt&quot; onclick=&quot;loadData()&quot;&gt;加载数据&lt;/button&gt;&lt;button onclick=&quot;localStorage.clear()&quot;&gt;注销&lt;/button&gt;&lt;hr&gt;&lt;div id=&quot;data&quot;&gt;&lt;/div&gt;&#x27;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      btn.onclick = () =&gt; &#123;</span><br><span class=\"line\">      //获取用户输入的用户名和密码</span><br><span class=\"line\">      const username = document.querySelector(&quot;#username&quot;).value.trim()</span><br><span class=\"line\">      const password = document.querySelector(&quot;#password&quot;).value.trim()</span><br><span class=\"line\">      //调用fetch完成登录</span><br><span class=\"line\">      fetch(&quot;http://localhost:3000/login&quot;,&#123;</span><br><span class=\"line\">        method:&quot;POST&quot;,</span><br><span class=\"line\">        headers:&#123;</span><br><span class=\"line\">          &quot;Content-type&quot;:&quot;application/json&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body:JSON.stringify(&#123;</span><br><span class=\"line\">          username,password</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;).then((res)=&gt;&#123;</span><br><span class=\"line\">        return res.json()</span><br><span class=\"line\">      &#125;).then((res)=&gt;&#123;</span><br><span class=\"line\">        if(res.status != &quot;ok&quot;)&#123;</span><br><span class=\"line\">          throw new Error(&quot;用户名或密码错误&quot;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          //登录成功后，我们要把信息存储到本地</span><br><span class=\"line\">          /*</span><br><span class=\"line\">            sessionStorage 中存储的数据页面一关，数据就会丢失</span><br><span class=\"line\">            localStorage 存储时间比较长</span><br><span class=\"line\">          */</span><br><span class=\"line\">         localStorage.setItem(&quot;token&quot;,res.result.token)</span><br><span class=\"line\">         localStorage.setItem(&quot;nickname&quot;,res.result.nickname)</span><br><span class=\"line\">         </span><br><span class=\"line\">         root.innerHTML = &quot;&lt;h1&gt;欢迎&quot; + localStorage.getItem(&quot;nickname&quot;) + &#x27;&lt;/h1&gt; &lt;button id=&quot;bt&quot; onclick=&quot;loadData()&quot;&gt;加载数据&lt;/button&gt;&lt;button onclick=&quot;localStorage.clear()&quot;&gt;注销&lt;/button&gt;&lt;hr&gt;&lt;div id=&quot;data&quot;&gt;&lt;/div&gt;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">        console.log(&quot;出错了&quot;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"axios\"><a class=\"markdownIt-Anchor\" href=\"#axios\">#</a> axios</h2>\n<p>1 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i axios</span><br></pre></td></tr></table></figure>\n<p>2 引用</p>\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n<p>baseURL 自动服务器根目录</p>\n<p>url 请求地址</p>\n<p>data:{} 请求体</p>\n<p>params:{} 指定查询字符串</p>\n<p>timeout: 过期时间单位毫秒</p>\n<p>transformRequest:[function(data,headers) {</p>\n<p>headers[“Content-Type”] = “”</p>\n<p>}] 对发送的 data 和 headers 进行修改，最后一个函数一定要返回字符串</p>\n<h3 id=\"cors跨域资源共享\"><a class=\"markdownIt-Anchor\" href=\"#cors跨域资源共享\">#</a> CORS (跨域资源共享)</h3>\n<p>跨域请求：</p>\n<p>​\t如果两个网站的完整域名不相同</p>\n<p>​\t\ta 网站：<span class=\"exturl\" data-url=\"aHR0cDovL2hhaGEuY29t\">http://haha.com</span></p>\n<p>​\t\tb 网站：<span class=\"exturl\" data-url=\"aHR0cDovL2hlaWhlaS5jb20=\">http://heihei.com</span></p>\n<p>​\t\t跨域需要检查 3 个东西：</p>\n<p>​\t\t\t协议 域名 端口号</p>\n<p>​\t\t\t\t只要有一个不同，就算跨域</p>\n<p>​\t\t\t当通过 AJAX 发送跨域请求时，浏览器为了服务器的安全</p>\n<p>​\t\t\t会阻止 JS 读取到服务器的数据</p>\n<p>​\t\t解决方案：</p>\n<p>​\t\t\t服务器中设置一个允许跨域的头</p>\n<p>​\t\t\t\tAccess-Control-Allow-Origin</p>\n<p>​\t\t\t\t\t允许哪些客户端访问我们的服务器</p>\n<h2 id=\"本地存储\"><a class=\"markdownIt-Anchor\" href=\"#本地存储\">#</a> 本地存储</h2>\n<p>sessionStorage 中存储的数据页面一关，数据就会丢失</p>\n<p>localStorage 存储时间比较长</p>\n<p>setItem () 用来存储数据</p>\n<p>getItem () 取数据</p>\n<p>removeItem () 删除数据</p>\n<p>clear () 清空</p>\n<h2 id=\"数据加密\"><a class=\"markdownIt-Anchor\" href=\"#数据加密\">#</a> 数据加密</h2>\n<p>在 Express 中使用 Token 进行加密和身份验证的方法有很多，以下是其中一种基本的实现方法：</p>\n<ol>\n<li>安装 jsonwebtoken 模块</li>\n</ol>\n<p>在终端中执行以下命令来安装 jsonwebtoken 模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jsonwebtoken</span><br></pre></td></tr></table></figure>\n<ol>\n<li>导入 jsonwebtoken 模块</li>\n</ol>\n<p>在代码中导入 jsonwebtoken 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsonwebtoken&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>生成 Token</li>\n</ol>\n<p>使用  <code>jwt.sign()</code>  方法生成 Token。例如，以下代码生成一个 Token，有效期为 1 小时：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> token = jwt.<span class=\"title function_\">sign</span>(&#123; <span class=\"attr\">userId</span>: <span class=\"number\">123</span> &#125;, <span class=\"string\">&#x27;secret&#x27;</span>, &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;1h&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中，第一个参数是一个 JSON 对象，用于指定 Token 中包含的信息。第二个参数是一个字符串，用于指定用于生成 Token 的密钥。第三个参数是一个 JSON 对象，用于指定 Token 的有效期。</p>\n<ol>\n<li>将 Token 添加到 HTTP 响应头中</li>\n</ol>\n<p>在 HTTP 响应中添加一个  <code>Authorization</code>  头，用于传递 Token。例如，以下代码将 Token 添加到 HTTP 响应头中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.<span class=\"title function_\">header</span>(<span class=\"string\">&#x27;Authorization&#x27;</span>, <span class=\"string\">`Bearer <span class=\"subst\">$&#123;token&#125;</span>`</span>).<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n<p>其中，Token 前缀  <code>Bearer</code>  是一种常见的 Token 传递方式，用于指示该 Token 是一个 Bearer Token。</p>\n<ol>\n<li>验证 Token</li>\n</ol>\n<p>使用  <code>jwt.verify()</code>  方法验证 Token 是否有效。例如，以下代码验证一个 Token 是否有效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> token = req.<span class=\"title function_\">header</span>(<span class=\"string\">&#x27;Authorization&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> decodedToken = jwt.<span class=\"title function_\">verify</span>(token, <span class=\"string\">&#x27;secret&#x27;</span>);</span><br><span class=\"line\">  req.<span class=\"property\">userData</span> = &#123; <span class=\"attr\">userId</span>: decodedToken.<span class=\"property\">userId</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Invalid Token&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，第一个参数是要验证的 Token，第二个参数是用于生成 Token 的密钥。如果 Token 有效，则从 Token 中解码出用户数据，并将其存储在请求对象的  <code>userData</code>  属性中。如果 Token 无效，则返回 HTTP 401 状态码。</p>\n<p>总之，使用 Token 进行加密和身份验证是一种非常安全和可靠的方式，可以帮助您保护您的应用程序和用户数据。在 Express 中，使用 jsonwebtoken 模块可以轻松地生成和验证 Token。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/",
            "url": "http://example.com/2023/05/27/nodeJS/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/",
            "title": "npm包管理器",
            "date_published": "2023-05-27T02:21:10.840Z",
            "content_html": "<p>package.json 是包的描述文件</p>\n<p>node 中通过该文件对项目进行描述</p>\n<p>每一个 node 项目必须有 package.json</p>\n<h2 id=\"packagejson\"><a class=\"markdownIt-Anchor\" href=\"#packagejson\">#</a> package.json</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;my_project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;这是对包的介绍&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;npm.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>name (必备)：包的名称，可以包含小写字母，_和 -</p>\n<p>version (必备)：包的版本，需遵循 x.x.x 格式</p>\n<p>description：对包的介绍</p>\n<p>main: 主文件</p>\n<p>author：作者</p>\n<p>license：版权的协议</p>\n<p>scripts (脚本)：可以自定义一些命令，然后可以通过 npm 进行执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;dir&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //当我们npm test时，就会执行dir</span><br><span class=\"line\">  //start 和 test 可以直接npm start/test</span><br><span class=\"line\">  //其他名字需要npm run 名字 去执行</span><br></pre></td></tr></table></figure>\n<p>规则：</p>\n<ul>\n<li>\n<ul>\n<li>版本从 1.0.0 开始</li>\n<li>修复错误，兼容旧版（补丁）1.0.1、1.0.2</li>\n<li>添加功能，兼容旧版（小更新）1.1.0</li>\n<li>更新功能，影响兼容（大更新）2.0.0</li>\n</ul>\n</li>\n</ul>\n<p>在终端通过 npm init 进行初始化 package.json（需要回答问题）</p>\n<p>npm init -y 表示所有的都按默认的来</p>\n<p>npm install (i) 包名    将指定包下载到当前项目中</p>\n<p>如果我们下载 lodash，下载完成后会弹出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">added 1 package, removed 8 packages, and audited 10 packages in 2s</span><br><span class=\"line\"></span><br><span class=\"line\">found 0 vulnerabilities</span><br></pre></td></tr></table></figure>\n<p>添加了 1 个包，移除了 8 个包，检查了 10 个包，发现了 0 个错误</p>\n<h4 id=\"install时发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#install时发生了什么\">#</a> install 时发生了什么？</h4>\n<p>1. 将包下载到当前项目的 node_modules 下</p>\n<p>2. 会在 package.json 中的 dependencies（依赖）添加一个新的属性</p>\n<p>如果此时删除了包，npm i 就会自动下载所有依赖</p>\n<p>3. 会自动添加 package-lock.json 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;^4.17.21&quot;表示匹配最新的4.x.x的版本，也就是如果后期lodash包更新到了4.18.1，我们的包也会一起更新，但是如果更新到了5.0.0，我们的包是不会随之更新的。如果是&quot;~4.17.21&quot;，~表示匹配最小依赖，也就是4.17.x。如果是&quot;*&quot;则表示匹配最新版本，即x.x.x（不建议使用）。当然也可以不加任何前缀，这样只会匹配到当前版本。</span><br></pre></td></tr></table></figure>\n<p>引入从 npm 下载的包时，直接写包名就可以</p>\n<p>我们安装时也可以指定版本：</p>\n<p>安装旧版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lodash@3.2.0</span><br></pre></td></tr></table></figure>\n<p>安装大于该版本的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lodash@<span class=\"string\">&quot;&gt; 3.2.0&quot;</span></span><br></pre></td></tr></table></figure>\n<p>npm install 包名 -g 全局安装</p>\n<p>全局安装时安装到计算机中</p>\n<p>通常装的都是一些工具</p>\n<p>所有的组件可以通过 <code>npm uninstall xxx</code>  来完成卸载。</p>\n<h2 id=\"npm镜像\"><a class=\"markdownIt-Anchor\" href=\"#npm镜像\">#</a> npm 镜像</h2>\n<p>npm 的仓库的服务器位于国外，有时并不是那么好使</p>\n<p>为了解决这个问题，可以在 npm 中配置一个镜像服务器</p>\n<p>镜像的配置：</p>\n<p>1. 在系统中安装 cnpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n<p>然后把所有的 npm 改成 cnpm 就行，你想用原版就 npm，镜像就 cnpm</p>\n<p>2. 彻底修改 npm 仓库地址（推荐）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n<p>还原：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br></pre></td></tr></table></figure>\n<p>显示当前仓库地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<h2 id=\"yarn\"><a class=\"markdownIt-Anchor\" href=\"#yarn\">#</a> yarn</h2>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/node%20http/",
            "url": "http://example.com/2023/05/27/nodeJS/node%20http/",
            "title": "http搭建服务器",
            "date_published": "2023-05-27T02:21:10.837Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Url</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>)<span class=\"comment\">//格式化url</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DATA</span> = [&#123;</span><br><span class=\"line\">  <span class=\"attr\">account</span>:<span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>:<span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"><span class=\"comment\">//创建服务器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// console.log(req.url);//请求地址</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(req.method);//请求方法</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = <span class=\"title class_\">Url</span>.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>)<span class=\"comment\">//url.query获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = url.<span class=\"property\">pathname</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> method = req.<span class=\"property\">method</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> datas = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(method==<span class=\"string\">&quot;GET&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(pathname == <span class=\"string\">&#x27;/reg&#x27;</span>) &#123;</span><br><span class=\"line\">        url = url.<span class=\"property\">query</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;=&#x27;</span>))</span><br><span class=\"line\">        <span class=\"variable constant_\">DATA</span>.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">account</span>:url[<span class=\"number\">0</span>][<span class=\"number\">1</span>],<span class=\"attr\">password</span>:url[<span class=\"number\">0</span>][<span class=\"number\">1</span>]&#125;)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">DATA</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;content-Type&quot;</span>: <span class=\"string\">&quot;text/html;charset=utf8&quot;</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;注册成功&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method==<span class=\"string\">&quot;POST&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pathname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(pathname == <span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">        req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          datas += data.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">          datas = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(datas)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(datas);</span><br><span class=\"line\">          <span class=\"variable constant_\">DATA</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item.<span class=\"property\">account</span> === datas.<span class=\"property\">account</span> &amp;&amp; item.<span class=\"property\">password</span> === datas.<span class=\"property\">password</span>) &#123;</span><br><span class=\"line\">              res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;content-Type&quot;</span>: <span class=\"string\">&quot;text/html;charset=utf8&quot;</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;登录成功&#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;content-Type&quot;</span>: <span class=\"string\">&quot;text/html;charset=utf8&quot;</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                res.<span class=\"title function_\">end</span>(<span class=\"string\">&#x27;登录失败&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\">//  res.end(&#x27;???&#x27;)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//监听port端口号</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`服务器运行在 http://127.0.0.1:<span class=\"subst\">$&#123;port&#125;</span>/`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/http%E5%8D%8F%E8%AE%AE/",
            "url": "http://example.com/2023/05/27/nodeJS/http%E5%8D%8F%E8%AE%AE/",
            "title": "http协议",
            "date_published": "2023-05-27T02:21:10.831Z",
            "content_html": "<h4 id=\"一当在浏览器中输入地址以后发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#一当在浏览器中输入地址以后发生了什么\">#</a> （一）当在浏览器中输入地址以后发生了什么？</h4>\n<p>1.DNS 解析，获取网站的 ip 地址</p>\n<p>2. 浏览器需要和服务器建立连接 (tcp/ip)</p>\n<p>3. 向服务器发送请求（http 协议）</p>\n<p>4. 服务器处理请求，并返回响应</p>\n<p>5. 浏览器将响应的页面渲染</p>\n<p>6. 断开和服务器的链接</p>\n<p>https:// <span class=\"exturl\" data-url=\"aHR0cDovL2xpbGljaGFvLmNvbQ==\">lilichao.com</span> / hello/index.html</p>\n<p>https:// 协议名</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbGljaGFvLmNvbQ==\">lilichao.com</span> 域名（domain）</p>\n<p>每个服务器都有自己的唯一标识（ip 地址），但是不好记忆，所以有域名</p>\n<p>/hello/index.html 网站资源路径</p>\n<h4 id=\"二客户端如何和服务器建立断开链接\"><a class=\"markdownIt-Anchor\" href=\"#二客户端如何和服务器建立断开链接\">#</a> （二）客户端如何和服务器建立（断开）链接</h4>\n<p>​\t- 通过三次握手和四次挥手。</p>\n<p>​\t- 三次握手</p>\n<p>1. 客户端发送连接请求（SYN）。</p>\n<p>2. 服务器收到连接请求，向客户端返回信息 (SYN,ACK 同意)。</p>\n<p>3. 客户端向服务器发送同意连接的信息（ACK）。</p>\n<p>​\t- 四次挥手</p>\n<p>1. 客户端向服务器发送请求，服务器数据发送完毕，请求断开连接（FIN）。</p>\n<p>2. 服务器向客户端返回数据，知道了 (ACK)。</p>\n<p>3. 服务器向客户端返回数据，收完了，可以断开连接 (FIN,ACK)。</p>\n<p>4. 客户端向服务器发数据，知道了，可以断开了 (ACK)。</p>\n<h2 id=\"tcpip协议族\"><a class=\"markdownIt-Anchor\" href=\"#tcpip协议族\">#</a> TCP/IP 协议族</h2>\n<p>TCP/IP 这组协议规定了互联网中所有的通信的细节</p>\n<p>​\t- 网络通信的过程</p>\n<p>收数据时</p>\n<p>应用层：软件的层面，浏览器 服务器都属于应用层</p>\n<p>传输层：负责对数据进行拆分，把大数据分为一个一个小包</p>\n<p>网络层：负责给数据包添加信息</p>\n<p>数据链路层：发送信息</p>\n<p>发数据时相反</p>\n<p>​\t-HTTP 协议就是应用层协议，用来规定客户端和服务器间通信的报文格式</p>\n<h3 id=\"报文\"><a class=\"markdownIt-Anchor\" href=\"#报文\">#</a> 报文？</h3>\n<p>浏览器和服务器之间的通信基于请求和响应</p>\n<p>​\t- 浏览器向服务器发送请求（request）</p>\n<p>​\t- 服务器向浏览器返回响应（response）</p>\n<p>请求和响应就是报文</p>\n<p>而 HTTP 协议就是对报文格式进行规定。</p>\n<h4 id=\"-请求报文request\"><a class=\"markdownIt-Anchor\" href=\"#-请求报文request\">#</a> - 请求报文（request）</h4>\n<p>​\t格式：</p>\n<p>​\t1. 请求首行</p>\n<p>GET /index.html?username=sunwukong HTTP/1.1</p>\n<p>通过 form 里的 method 属性更改请求，默认 get</p>\n<p>get 请求，post 请求</p>\n<p>get 请求用来向服务器请求资源</p>\n<p>post 请求主要用来向服务器发送数据</p>\n<p>/index.html?username=sunwukong 表示请求资源的路径</p>\n<p>？后面的内容叫查询字符串，查询字符串是一个名值对结构</p>\n<p>多个查询字符串之间用 &amp; 符分隔</p>\n<p>get 请求通过查询字符串将数据发送给服务器</p>\n<p>​\t但查询字符串会在浏览器地址栏中直接显示，所以安全性较差</p>\n<p>​\t同时 url 地址长度有限制，所以 get 请求无法发送较大的数据</p>\n<p>post 通过请求体发送数据</p>\n<p>​\t安全性较好，请求体大小没有限制</p>\n<p>HTTP/1.1 协议版本</p>\n<p>​\t2. 请求头</p>\n<p>也是名值对结构，告诉服务器我们浏览器的信息</p>\n<p>Accept 浏览器可以接受的文件类型</p>\n<p>Accept-Encoding 浏览器允许的压缩的编码</p>\n<p>Accept-Language 浏览器可接收的语言 zh-CN（简体或繁体中文）</p>\n<p>User-Agent 用户代理，它是一段用来描述浏览器信息的字符串</p>\n<p>​\t3. 空行</p>\n<p>用来分隔请求头和请求体</p>\n<p>​\t4. 请求体（get 请求没有）</p>\n<p>post 请求通过请求体来发送数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /new/index.html HTTP/1.1</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Cookie: track_cookie_user_id=97758737-d2b0-fb0c-3f4c-8ebbacfab63b; amp.locale=undefined</span><br><span class=\"line\">Host: ehall.cqupt.edu.cn</span><br><span class=\"line\">If-Modified-Since: Sun, 04 Apr 2021 12:05:29 GMT</span><br><span class=\"line\">If-None-Match: &quot;6069ab89-17aac&quot;</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46</span><br></pre></td></tr></table></figure>\n<h4 id=\"响应报文\"><a class=\"markdownIt-Anchor\" href=\"#响应报文\">#</a> 响应报文：</h4>\n<p>1. 响应首行</p>\n<p>HTTP/1.1 304 Not Modified</p>\n<p>304 响应状态码</p>\n<p>Not Modified 对响应状态码的描述</p>\n<p>响应状态码规则：</p>\n<p>1xx 请求处理中</p>\n<p>2xx 表示成功</p>\n<p>3xx 表示请求的重定向</p>\n<p>4xx 表示客户端错误</p>\n<p>5xx 表示服务器错误</p>\n<p>2. 响应头</p>\n<p>Content-Type 描述响应体的类型</p>\n<p>Content-Length 描述响应大小</p>\n<p>3. 空行</p>\n<p>分隔响应头和响应体</p>\n<p>4. 响应体</p>\n<p>​\t响应体是服务器返回给客户端的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 304 Not Modified</span><br><span class=\"line\">Server: openresty</span><br><span class=\"line\">Date: Mon, 12 Dec 2022 14:36:07 GMT</span><br><span class=\"line\">Last-Modified: Sun, 04 Apr 2021 12:05:29 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: &quot;6069ab89-17aac&quot;</span><br><span class=\"line\">Expires: Mon, 12 Dec 2022 14:36:07 GMT</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">X-Frame-Options: SAMEORIGIN</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/27/nodeJS/express/",
            "url": "http://example.com/2023/05/27/nodeJS/express/",
            "title": "express",
            "date_published": "2023-05-27T02:21:10.828Z",
            "content_html": "<p><code>express</code>  是 node 中的服务器软件</p>\n<p>通过 express 可以快速的在 node 中搭建一个 web 服务器</p>\n<p>使用步骤：</p>\n<p>1. 创建并初始化项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<p>2. 安装 express</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express</span><br></pre></td></tr></table></figure>\n<p>3. 创建 index.js 并编写代码</p>\n<p>res.sendStatus (404)// 向客户端发送响应状态码</p>\n<p>res.status (404)// 设置响应状态码，但是并不发送</p>\n<p>res.send ()// 设置并发送响应体</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//获取服务器的对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    如果希望服务器可以正常访问，则需要为服务器设置路由</span></span><br><span class=\"line\"><span class=\"comment\">        路径可以根据不同的请求方式和请求地址来处理客户的请求</span></span><br><span class=\"line\"><span class=\"comment\">        app.METHOD(...)</span></span><br><span class=\"line\"><span class=\"comment\">        METHOD 可以是get或者post</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    中间件</span></span><br><span class=\"line\"><span class=\"comment\">        -在express中，我们使用app.use来定义一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">            中间件和路由很像，用法也很像</span></span><br><span class=\"line\"><span class=\"comment\">            但中间件不会检测你返回的请求，全都要</span></span><br><span class=\"line\"><span class=\"comment\">            而且路径设置父目录，只要前面一样就会访问</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;/&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到请求&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// res.send(&quot;这是通过中间件返回的响应&quot;)</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()<span class=\"comment\">//放行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;/&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到请求s&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// res.send(&quot;这是通过中间件返回的响应&quot;)</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()<span class=\"comment\">//放行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;/&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到请求a&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;这是通过中间件返回的响应1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&quot;/&quot;表示根目录</span></span><br><span class=\"line\"><span class=\"comment\">//路由的回调函数执行时，会收到三个参数</span></span><br><span class=\"line\"><span class=\"comment\">//第一叫做request，第二叫做response，第三个叫next，他是一个函数</span></span><br><span class=\"line\"><span class=\"comment\">//调用函数后，可以触发后面的中间件,它不能在响应处理完毕后调用</span></span><br><span class=\"line\"><span class=\"comment\">// app.get(&quot;/&quot;,(req,res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;有人访问我了&quot;);//当有人访问根目录地址时，调用回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//     //在路由中要做两件事</span></span><br><span class=\"line\"><span class=\"comment\">//     //读取客户请求(request)</span></span><br><span class=\"line\"><span class=\"comment\">//     //req表示用户的请求信息，通过req可以获取用户的请求信息</span></span><br><span class=\"line\"><span class=\"comment\">//     // console.log(req.url);</span></span><br><span class=\"line\"><span class=\"comment\">//     //根据客户请求返回响应(response)</span></span><br><span class=\"line\"><span class=\"comment\">//     //服务器通过res发送给客户端返回数据</span></span><br><span class=\"line\"><span class=\"comment\">//     // res.sendStatus(404)//向客户端发送响应状态码</span></span><br><span class=\"line\"><span class=\"comment\">//     res.status(200)//设置响应状态码，但是并不发送</span></span><br><span class=\"line\"><span class=\"comment\">//     res.send(&quot;你的请求没问题，但就是不给你看&quot;)//设置并发送响应体</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//启动服务器</span></span><br><span class=\"line\"><span class=\"comment\">//app.listen(端口号) 用来启动服务器</span></span><br><span class=\"line\"><span class=\"comment\">//服务器启动后，便可以通过3000端口访问服务器</span></span><br><span class=\"line\"><span class=\"comment\">//协议名://ip地址:端口号/路径</span></span><br><span class=\"line\"><span class=\"comment\">//http://localhost:3000</span></span><br><span class=\"line\"><span class=\"comment\">//http://127.0.0.1(本地)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器启动才执行&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>服务器中的代码对于外部都是不可见的</p>\n<p>所以如果希望浏览器可以访问，则要将页面设置静态资源</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//创建服务器实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    服务器中的代码对于外部都是不可见的</span></span><br><span class=\"line\"><span class=\"comment\">所以如果希望浏览器可以访问，则要将页面设置静态资源</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"comment\">//设置static中间件后，浏览器访问时，会自动去public目录下寻找是否有匹配的静态资源</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./public&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;这是helllo路由&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已启动~&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>req.query 表示查询字符串中的请求参数</p>\n<h1 id=\"param和post请求\"><a class=\"markdownIt-Anchor\" href=\"#param和post请求\">#</a> param 和 post 请求</h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">//配置静态资源</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;public&quot;</span>)))</span><br><span class=\"line\"><span class=\"comment\">//引入解析请求体的中间件</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">urlencoded</span>())</span><br><span class=\"line\"><span class=\"comment\">//添加一个路由，可以读取get请求的参数</span></span><br><span class=\"line\"><span class=\"comment\">///login --&gt; http://localhost/login</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取用户发送的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.<span class=\"property\">query</span>.<span class=\"property\">username</span> === <span class=\"string\">&quot;admin&quot;</span> &amp;&amp; req.<span class=\"property\">query</span>.<span class=\"property\">password</span> === <span class=\"string\">&quot;123123&quot;</span>)&#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;&lt;h1&gt;登入成功&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;&lt;h1&gt;用户名或密码错误&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过req.body获取请求体中的参数</span></span><br><span class=\"line\">    <span class=\"comment\">//默认情况下express不会自己解析请求体，需要通过中间件为其增加功能</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">body</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.<span class=\"property\">body</span>.<span class=\"property\">username</span> === admin &amp;&amp; req.<span class=\"property\">body</span>.<span class=\"property\">password</span> === <span class=\"string\">&quot;123123&quot;</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;post请求已收到&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//get请求发送参数的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\">// /hello/:id 当用户访问/hello/xxx时就会触发</span></span><br><span class=\"line\"><span class=\"comment\">//在路径中以冒号命名的部分称为param，在get请求中可以被当做请求参数</span></span><br><span class=\"line\"><span class=\"comment\">//param传参一般不会传特别复杂的参数</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/hello/:id&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以通过req.params属性来获取这些参数</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello路由&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">params</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已经启动&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个数组存储用户信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">USERS</span> = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;123123&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">nickname</span>:<span class=\"string\">&quot;超级管理员&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">username</span>:<span class=\"string\">&quot;sunwukong&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>:<span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">nickname</span>:<span class=\"string\">&quot;齐天大圣&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">//配置静态资源</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;public&quot;</span>)))</span><br><span class=\"line\"><span class=\"comment\">//引入解析请求体的中间件</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">urlencoded</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> username = req.<span class=\"property\">body</span>.<span class=\"property\">username</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> password = req.<span class=\"property\">body</span>.<span class=\"property\">password</span></span><br><span class=\"line\">    <span class=\"comment\">// //获取用户的用户名和密码后，需要查找用户</span></span><br><span class=\"line\">    <span class=\"comment\">// for(const user of USERS) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(user.username === username) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         //用户存在，检测用户密码</span></span><br><span class=\"line\">    <span class=\"comment\">//         if(user.password === password) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//             //信息正确,登入成功</span></span><br><span class=\"line\">    <span class=\"comment\">//             res.send(&quot;登入成功&quot; + user.nickname)</span></span><br><span class=\"line\">    <span class=\"comment\">//             return</span></span><br><span class=\"line\">    <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// res.send(&quot;用户名或密码错误&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> loginuser = <span class=\"variable constant_\">USERS</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.<span class=\"property\">username</span> === username &amp;&amp; item.<span class=\"property\">password</span> === password</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(loginuser) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;登入成功&quot;</span> + loginuser.<span class=\"property\">nickname</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/register&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;username,password,repassword,nickname&#125; = req.<span class=\"property\">body</span></span><br><span class=\"line\">    <span class=\"comment\">//验证用户名是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"variable constant_\">USERS</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.<span class=\"property\">username</span> === username || item.<span class=\"property\">nickname</span> === nickname</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//验证密码是否相同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!user &amp;&amp; password === repassword) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">USERS</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">            username,</span><br><span class=\"line\">            password,</span><br><span class=\"line\">            nickname</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;注册成功&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;注册失败&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已经启动&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"模板引擎\"><a class=\"markdownIt-Anchor\" href=\"#模板引擎\">#</a> 模板引擎</h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">STUDENT_ARR</span> = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&quot;sunwukong&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">address</span>:<span class=\"string\">&quot;huaguoshan&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&quot;zhubajie&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">address</span>:<span class=\"string\">&quot;gaolaozhuang&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//将ejs设置为默认的模板引擎</span></span><br><span class=\"line\">app.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;view engine&quot;</span>,<span class=\"string\">&quot;ejs&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//配置模板路径</span></span><br><span class=\"line\">app.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;views&quot;</span>,path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;views&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">//配置静态资源路径</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;public&quot;</span>)))</span><br><span class=\"line\"><span class=\"comment\">//配置请求体解析</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">urlencoded</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/hello&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/students&quot;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//希望用户在访问student路由时，可以给用户返回一个有学生信息的网页</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        希望有这么一个东西，它长得像网页，但是它里面可以嵌入变量</span></span><br><span class=\"line\"><span class=\"comment\">        在node中叫模板</span></span><br><span class=\"line\"><span class=\"comment\">        在node中存在有很多模板引擎</span></span><br><span class=\"line\"><span class=\"comment\">        ejs是node中的一款模板引擎</span></span><br><span class=\"line\"><span class=\"comment\">            1、安装ejs</span></span><br><span class=\"line\"><span class=\"comment\">            2、配置express模板引擎为ejs</span></span><br><span class=\"line\"><span class=\"comment\">            注意，模板引擎需要被express渲染后用户才能使用</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"comment\">//res.render() 渲染一个模板引擎并返回给浏览器</span></span><br><span class=\"line\">   <span class=\"comment\">//可以将一个对象作为render的第二个参数，这样在模板中可以访问到对象中的数据</span></span><br><span class=\"line\">   <span class=\"comment\">//&lt;%=%&gt;在ejs输出内容时，会自动对特殊字符进行转义</span></span><br><span class=\"line\">   <span class=\"comment\">//这个设计主要为了避免xss攻击</span></span><br><span class=\"line\">   <span class=\"comment\">//&lt;%-%&gt;也可以输出，不会对特殊字符进行转义</span></span><br><span class=\"line\">   <span class=\"comment\">//&lt;% %&gt;可以在其中直接编写js代码，代码会在服务器中执行</span></span><br><span class=\"line\">   res.<span class=\"title function_\">render</span>(<span class=\"string\">&quot;students&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;sunwukong&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以在所有路由的后面配置错误路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//只要这个中间件执行，说明上面的地址都没有匹配</span></span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">404</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;访问的地址被外星人劫持&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>,<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务器已启动&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>ejs 中的注释 &lt;%# %&gt;</p>\n<p>res.redirect () 用来发起重定向请求</p>\n<p>让浏览器向另外一个地址再发起一个请求</p>\n<h1 id=\"router\"><a class=\"markdownIt-Anchor\" href=\"#router\">#</a> Router</h1>\n<p>Router 是 express 中创建的一个对象</p>\n<p>router 实际是一个中间件，可以在上面绑定各种路由和其他中间件</p>\n<p>因为是中间件，调用需要 <code>app.use(router)</code></p>\n<p><code>router.get(&quot;/hello&quot;,(req,res)=&gt;&#123;&#125;)</code></p>\n<p>他可以把路由写到不同的文件下，方便管理</p>\n<h2 id=\"静态资源\"><a class=\"markdownIt-Anchor\" href=\"#静态资源\">#</a> 静态资源</h2>\n",
            "tags": []
        }
    ]
}