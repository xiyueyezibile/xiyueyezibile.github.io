{
    "version": "https://jsonfeed.org/version/1",
    "title": "汐月也自闭了的个人博客 • All posts by \"前端工程化\" category",
    "description": "这个需求写不了",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "url": "http://example.com/2023/08/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96/",
            "title": "模块化",
            "date_published": "2023-08-28T09:52:35.980Z",
            "content_html": "<p>模块化，顾名思义，就是将相同功能的代码封装为一个功能模块，以便在其他地方多次进行复用，不过代码复用并非模块化一条路可以走：</p>\n<p>在 node 中，默认支持的模块化规范叫做<strong> CommonJS</strong></p>\n<p>在 CommonJS 中一个 js 文件就是一个模块</p>\n<h2 id=\"commonjs规范\"><a class=\"markdownIt-Anchor\" href=\"#commonjs规范\">#</a> CommonJS 规范：</h2>\n<h3 id=\"-引入模块\"><a class=\"markdownIt-Anchor\" href=\"#-引入模块\">#</a> - 引入模块</h3>\n<p>使用 <code>require(“模块的路径”)</code>  函数来引入模块</p>\n<p>模块名要以 <code>./</code>  或 <code>../</code>  开头</p>\n<p>在定义模块时，模块中的内容默认是不能被外部看到的。</p>\n<p>可以通过 <code>exports</code>  来设置要向外部暴露的内容。</p>\n<p><code>module.exports</code>  同时导出多个值。</p>\n<h3 id=\"-引入核心模块\"><a class=\"markdownIt-Anchor\" href=\"#-引入核心模块\">#</a> - 引入核心模块</h3>\n<p><code>require(&quot;核心模块名字&quot;)</code></p>\n<p>cjs 为扩展名，表示是一个 CommonJS 模块</p>\n<p>也可以用文件夹作为一个模块， <code>require(&quot;./文件名&quot;)</code></p>\n<p>所有 CommonJS 的模块都会包装到一个函数中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">exports</span>，<span class=\"built_in\">require</span>，<span class=\"variable language_\">module</span>，_ _filename,__dirname</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>默认 node 中的模块化标准是 CommonJS</p>\n<h3 id=\"要变成es规范有两种方法\"><a class=\"markdownIt-Anchor\" href=\"#要变成es规范有两种方法\">#</a> 要变成 ES 规范，有两种方法：</h3>\n<p>1. 文件后缀名为.mjs</p>\n<p>2. 创建 package.json 文件，修改 type 属性为 module</p>\n<h2 id=\"amd\"><a class=\"markdownIt-Anchor\" href=\"#amd\">#</a> AMD</h2>\n<p>在 cjs 规范中，模块是同步加载的（毕竟它是设计给服务端 nodejs 的），也就是说，即使不需要依赖其他模块的代码，依然需要等待前面模块加载完毕之后才能开始执行，在模块越来越大之后无疑会损失更多性能，因此 AMD（Asynchronous Module Definition 异步模块定义）便应运而生，顾名思义，这个规范实现了模块的异步加载。</p>\n<h2 id=\"cmd\"><a class=\"markdownIt-Anchor\" href=\"#cmd\">#</a> CMD</h2>\n<p>CMD 的基本逻辑跟 AMD 是一致的，只不过在写法上 CMD 采用了 cjs 的部分语法，且 CMD 仅支持浏览器端使用，并在模块加载方面针对浏览器端运行的代码做了些许优化。同样需要引入三方库来支持 CMD 规范，比较常用的是 <code>sea.js</code></p>\n<h2 id=\"es模块化\"><a class=\"markdownIt-Anchor\" href=\"#es模块化\">#</a> ES 模块化：</h2>\n<p>通过 export 导出变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> a  = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>导入用 import</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./m3.mjs&quot;</span></span><br></pre></td></tr></table></figure>\n<p>es 模块不能省略扩展名</p>\n<p>导入值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,b&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./m3.mjs&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a <span class=\"keyword\">as</span> m,b&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./m3.mjs&quot;</span></span><br></pre></td></tr></table></figure>\n<p>as 把 a 名字改成 m，a 就不能用了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> m4 <span class=\"keyword\">from</span> <span class=\"string\">&quot;./m3.mjs&quot;</span></span><br></pre></td></tr></table></figure>\n<p>* 表示导入所有，以对象形式，并且改名为 m4</p>\n<p>// 设置默认导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// 导入默认导出，默认导出内容可以随便起名，一个模块只有一个默认导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asd <span class=\"keyword\">from</span> <span class=\"string\">&quot;./m3.mjs&quot;</span> </span><br></pre></td></tr></table></figure>\n<p>// 可以同时导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asd,&#123;a,b&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./m3.mjs&quot;</span> </span><br></pre></td></tr></table></figure>\n<p><strong>通过 ES 模块化导入的都是常量（const），es 模块运行在严格模式下</strong></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>\n<p>nodejs 直接支持 commonjs 和 es6 模块，浏览器端直接支持 es6 模块，其余情况下均需要第三方工具预编译或运行时支持</p>\n</li>\n<li>\n<p>commonjs 采用同步方式加载模块，而其余三者则使用异步方式对模块进行加载</p>\n</li>\n<li>\n<p>commonjs、AMD 和 CMD 模块导出的均是对象值的复制，而 es6 模块采用具名方式导出时导出的是地址，后者被导出内容在模块内发生变化时会反映到外部。</p>\n</li>\n</ul>\n<h2 id=\"核心模块\"><a class=\"markdownIt-Anchor\" href=\"#核心模块\">#</a> 核心模块</h2>\n<p>node 中自带的模块，可以在 node 中直接使用</p>\n<p>global 是 node 中的全局对象，作用类似于 window</p>\n<p>ES 标准下，全局对象的标准名 globalThis</p>\n<h3 id=\"process\"><a class=\"markdownIt-Anchor\" href=\"#process\">#</a> Process</h3>\n<p>表示当前 node 的进程</p>\n<p>通过该对象可以获取进程的信息，或者对进程做各种操作</p>\n<p>process.exit ()  结束当前进程</p>\n<p>process.nextTick (callback)  将函数插入到 tick 队列中</p>\n<p>代码执行顺序：</p>\n<p>调用栈</p>\n<p>tick 队列，会在微任务队列和宏任务队列中任务之前执行</p>\n<p>微任务队列</p>\n<p>宏任务队列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;process&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"path\"><a class=\"markdownIt-Anchor\" href=\"#path\">#</a> Path</h3>\n<p>表示的路径</p>\n<p>通过 path 可以获取各种路径</p>\n<p><code>path.resolve([...paths]) </code> 生成一个绝对路径</p>\n<p>如果直接调用 resolve 会直接返回当前的工作目录</p>\n<p>如果将相对路径作为参数，则 resolve 会自动将其转换为绝对路径</p>\n<p>根据工作目录不同，产生的绝对路径不同。</p>\n<p>所以一般会将一个绝对路径作为第一个参数，一个相对路径作为第二个参数</p>\n<p>这样他会自动计算出对应的路径，但是这样也不推荐，因为换绝对路径就会报错</p>\n<p><strong>最终</strong></p>\n<p>path.resolve(__dirname,&quot;./m5.js&quot;)</p>\n<p>前面用__dirname 可以直接获取绝对路径，再加上后面的路径。</p>\n<p>而且在任何方式去获取路径获取的都是一样的。</p>\n<h3 id=\"fs\"><a class=\"markdownIt-Anchor\" href=\"#fs\">#</a> fs</h3>\n<p>用来帮助 node 操作磁盘中的文件</p>\n<p>文件操作也就是所谓的 I/O 操作，input output</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"property\">readFileSync</span>（路径）同步读取文件的方法，会阻塞后面代码的执行</span><br></pre></td></tr></table></figure>\n<p>当我们通过 fs 模块读取磁盘中的对象时，读取到的数据总以 Buffer 对象的形式返回</p>\n<p>Buffer 是一个临时用来存储数据的缓冲区</p>\n<p><code>fs.readFile(路径，回调函数)</code>  异步读取文件的方法</p>\n<p>数据会以函数的参数传进来，它有两个参数</p>\n<p><code>(err,buffer)=&gt;&#123;&#125;</code></p>\n<p>错误信息会传进第一个参数，没用则是 null</p>\n<p>否则会传进 buffer 中。</p>\n<p>这个方法不会阻塞后续代码的执行，但是用到了回调函数</p>\n<p>所以我们 <code>require(&quot;fs/promises&quot;)</code></p>\n<p>获取 promise 版本的 fs</p>\n<p>fs.readFile (路径)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buf = fs.<span class=\"title function_\">readFile</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./m2.js&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;出错了&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者用 async</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> buf = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readFile</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./m2.js&quot;</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buf.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>fs.appendFile(路径，写进去的数据)</code>  创建新文件，或者将数据添加到已有文件中</p>\n<p>返回值为 undefined</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.appendFile(path.resolve(__dirname,&quot;./fs创建的.js&quot;),&quot;我是被m5中fs创建的&quot;)</span><br></pre></td></tr></table></figure>\n<p><code>fs.mkdir(路径) </code> 创建目录</p>\n<p><code>mkdir</code>  可以接收一个配置对象作为第二个参数，通过该对象，可以对方法的功能进行配置</p>\n<p><code>recursive</code>  默认 false，设置为 true 后，自动创建不存在的上一级目录</p>\n<p><code>&#123;recursive:true&#125;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node:fs/promises&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;node:path&quot;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">mkdir</span>(path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./creatFS&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>fs.rmdir(路径)</code>  删除目录</p>\n<p><code>recursive</code>  对 rmdir 也同理</p>\n<p><code>fs.rm() </code> 删除文件</p>\n<p><code>fs.rename(旧名路径，新名路径)</code>  重命名（实际是剪切，可以移位置）</p>\n<p><code>fs.copyFile(复制文件路径，转移路径)</code>  复制文件</p>\n<p><code>fs.writeFile(文件路径，写入值) </code> 重写文件</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/08/27/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/",
            "url": "http://example.com/2023/08/27/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/",
            "title": "npm包管理工具",
            "date_published": "2023-08-27T13:49:36.932Z",
            "content_html": "<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>npm（Node Package Manager，Node 包管理器）是 node.js 默认的用 JavaScript 编写的软件包管理系统。<br>\n如果一个项目中存在 package.json 文件中，那么用户可以直接使用 npm install 命令自动安装和维护当前项目所需的所有模块，在 package.json 文件中，开发者可以指定每个依赖项的版本范围，这样既可以保证模块自动更新，又不会因为所需模块功能大幅变化而导致项目出现问题，开发者也可以选择将模块固定在某个版本之上。</p>\n<p>package.json 是包的描述文件</p>\n<p>node 中通过该文件对项目进行描述</p>\n<p>每一个 node 项目必须有 package.json</p>\n<h2 id=\"packagejson\"><a class=\"markdownIt-Anchor\" href=\"#packagejson\">#</a> package.json</h2>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;my_project&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;这是对包的介绍&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>name (必备)</strong>：包的名称，可以包含小写字母，_和 -</p>\n<p><strong>version (必备)</strong>：包的版本，需遵循 x.x.x 格式</p>\n<p><strong>description</strong>：对包的介绍</p>\n<p><strong>main</strong>: 主文件</p>\n<p><strong>author</strong>：作者</p>\n<p><strong>license</strong>：版权的协议</p>\n<p><strong>scripts (脚本)</strong>：可以自定义一些命令，然后可以通过 npm 进行执行</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//当我们npm test时，就会执行dir</span></span><br><span class=\"line\">  <span class=\"comment\">//start 和 test 可以直接npm start/test</span></span><br><span class=\"line\">  <span class=\"comment\">//其他名字需要npm run 名字 去执行</span></span><br></pre></td></tr></table></figure>\n<p>规则：</p>\n<ul>\n<li>\n<ul>\n<li>版本从 1.0.0 开始</li>\n<li>修复错误，兼容旧版（补丁）1.0.1、1.0.2</li>\n<li>添加功能，兼容旧版（小更新）1.1.0</li>\n<li>更新功能，影响兼容（大更新）2.0.0</li>\n</ul>\n</li>\n</ul>\n<p>在终端通过 npm init 进行初始化 package.json（需要回答问题）</p>\n<p>npm init -y 表示所有的都按默认的来</p>\n<p>npm install (i) 包名    将指定包下载到当前项目中</p>\n<p>如果我们下载 lodash，下载完成后会弹出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">added 1 package, removed 8 packages, and audited 10 packages in 2s</span><br><span class=\"line\"></span><br><span class=\"line\">found 0 vulnerabilities</span><br></pre></td></tr></table></figure>\n<p>添加了 1 个包，移除了 8 个包，检查了 10 个包，发现了 0 个错误</p>\n<h4 id=\"install时发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#install时发生了什么\">#</a> install 时发生了什么？</h4>\n<p>1. 将包下载到当前项目的 node_modules 下</p>\n<p>2. 会在 package.json 中的 dependencies（依赖）添加一个新的属性</p>\n<p>如果此时删除了包，npm i 就会自动下载所有依赖</p>\n<p>3. 会自动添加 package-lock.json 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;^4.17.21&quot;表示匹配最新的4.x.x的版本，也就是如果后期lodash包更新到了4.18.1，我们的包也会一起更新，但是如果更新到了5.0.0，我们的包是不会随之更新的。如果是&quot;~4.17.21&quot;，~表示匹配最小依赖，也就是4.17.x。如果是&quot;*&quot;则表示匹配最新版本，即x.x.x（不建议使用）。当然也可以不加任何前缀，这样只会匹配到当前版本。</span><br></pre></td></tr></table></figure>\n<p>引入从 npm 下载的包时，直接写包名就可以</p>\n<p>我们安装时也可以指定版本：</p>\n<p>安装旧版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lodash@3.2.0</span><br></pre></td></tr></table></figure>\n<p>安装大于该版本的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lodash@&quot;&gt; 3.2.0&quot;</span><br></pre></td></tr></table></figure>\n<p>npm install 包名 -g 全局安装</p>\n<p>全局安装时安装到计算机中</p>\n<p>通常装的都是一些工具</p>\n<p>所有的组件可以通过 <code>npm uninstall xxx</code>  来完成卸载。</p>\n<h2 id=\"npm镜像\"><a class=\"markdownIt-Anchor\" href=\"#npm镜像\">#</a> npm 镜像</h2>\n<p>npm 的仓库的服务器位于国外，有时并不是那么好使</p>\n<p>为了解决这个问题，可以在 npm 中配置一个镜像服务器</p>\n<p>镜像的配置：</p>\n<p>1. 在系统中安装 cnpm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n<p>然后把所有的 npm 改成 cnpm 就行，你想用原版就 npm，镜像就 cnpm</p>\n<p>2. 彻底修改 npm 仓库地址（推荐）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n<p>还原：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br></pre></td></tr></table></figure>\n<p>显示当前仓库地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<h2 id=\"yarn\"><a class=\"markdownIt-Anchor\" href=\"#yarn\">#</a> yarn</h2>\n<p>Yarn 是  <code>Yet Another Resource Negotiator</code>  的简写，可以译为另一种资源协调者，也就是资源管理器。</p>\n<p>Yarn 是由 Facebook 、Google、Exponent 、Tilde 联合推出的一个新的 Javascript 包管理工具，它的出现主要是为了弥补  <code>npm</code>  的一些缺陷。</p>\n<p>官网上介绍了 Yarn 的一些优势，例如 ：</p>\n<ul>\n<li>速度超快：Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</li>\n<li>超级安全：在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</li>\n<li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</li>\n</ul>\n<h3 id=\"yarn的特性\"><a class=\"markdownIt-Anchor\" href=\"#yarn的特性\">#</a> <strong>Yarn 的特性</strong></h3>\n<ul>\n<li>离线模式：如果你以前安装过某个包，再次安装时可以在没有任何互联网连接的情况下进行。</li>\n<li>确定性：不管安装顺序如何，相同的依赖关系将在每台机器上以相同的方式安装。</li>\n<li>网络性能：Yarn 有效地将请求排序，避免请求堆积，以最大限度地提高网络利用率。</li>\n<li>多个注册表：无论从 npm 或 Bower 安装任何包，能保持包工作流程相同。</li>\n<li>网络恢复：单个请求失败不会导致安装失败，请求在失败时会自动重试。</li>\n<li>平面模式：将不兼容版本的依赖项解析为单个版本，以避免创建重复项。</li>\n</ul>\n<h3 id=\"yarn与npm对比\"><a class=\"markdownIt-Anchor\" href=\"#yarn与npm对比\">#</a> yarn 与 npm 对比</h3>\n<p>Yarn 也是一个包管理工具，可以用来代替  <code>npm</code> 。对比  <code>npm</code>  有如下区别：</p>\n<ul>\n<li>速度方面： <code>npm</code>  是按照队列执行每个包，必须要等到当前包安装后才能继续安装后面的包。而 Yarn 则是同步执行所有任务，提高了性能。</li>\n<li>安装版本统一：Yarn 默认会生成这样的锁文件， <code>npm</code>  要通过  <code>shrinkwrap</code>  命令生成  <code>npm-shrinkwrap.json</code>  文件，只有当这个文件存在的时候，软件包版本信息才会被记录和更新。</li>\n<li>更简洁的输出： <code>npm</code>  的输出信息冗长，Yarn 则简洁很多。</li>\n</ul>\n<h3 id=\"yarn命令与npm命令的对应关系如下\"><a class=\"markdownIt-Anchor\" href=\"#yarn命令与npm命令的对应关系如下\">#</a> yarn 命令与 npm 命令的对应关系如下：</h3>\n<h4 id=\"初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#初始化项目\">#</a> 初始化项目:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init -y</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载项目的所有声明的依赖\"><a class=\"markdownIt-Anchor\" href=\"#下载项目的所有声明的依赖\">#</a> 下载项目的所有声明的依赖:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载指定的运行时依赖包\"><a class=\"markdownIt-Anchor\" href=\"#下载指定的运行时依赖包\">#</a> 下载指定的运行时依赖包:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack@3.2.1</span><br><span class=\"line\">npm install webpack@3.2.1 -S</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载指定的开发时依赖\"><a class=\"markdownIt-Anchor\" href=\"#下载指定的开发时依赖\">#</a> 下载指定的开发时依赖:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack@3.2.1 -D</span><br><span class=\"line\">npm install webpack@3.2.1 -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"全局下载指定包\"><a class=\"markdownIt-Anchor\" href=\"#全局下载指定包\">#</a> 全局下载指定包:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add webpack</span><br><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除依赖包\"><a class=\"markdownIt-Anchor\" href=\"#删除依赖包\">#</a> 删除依赖包:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn remove webpack</span><br><span class=\"line\">npm remove webpack -S</span><br><span class=\"line\">yarn global remove webpack</span><br><span class=\"line\">npm remove webpack -g</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行项目中配置的script\"><a class=\"markdownIt-Anchor\" href=\"#运行项目中配置的script\">#</a> 运行项目中配置的 script:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run xxx</span><br><span class=\"line\">npm run xxx</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看某个包的信息\"><a class=\"markdownIt-Anchor\" href=\"#查看某个包的信息\">#</a> 查看某个包的信息:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn info xxx</span><br><span class=\"line\">npm info xxx</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置淘宝镜像\"><a class=\"markdownIt-Anchor\" href=\"#设置淘宝镜像\">#</a> 设置淘宝镜像:</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h2 id=\"pnpm\"><a class=\"markdownIt-Anchor\" href=\"#pnpm\">#</a> pnpm</h2>\n<p><code>pnpm</code>  全称  <code>performant npm</code> ，意思为  <code>高性能的 npm</code> 。 <code>pnpm</code>  由  <code>npm/yarn</code>  衍生而来，解决了  <code>npm/yarn</code>  内部潜在的  <code>bug</code> ，极大的优化了性能，扩展了使用场景。被誉为  <code>最先进的包管理工具</code> 。</p>\n<p><strong>特点：</strong></p>\n<p>速度快、节约磁盘空间、支持  <code>monorepo</code> 、安全性高。</p>\n<p><code>pnpm</code>  相比较于  <code>yarn/npm</code>  这两个常用的包管理工具在性能上也有了极大的提升，根据目前官方提供的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZzby5jc2RuLm5ldCUyRnNvJTJGc2VhcmNoJTNGcSUzRGJlbmNobWFyayUyNnNwbSUzRDEwMDEuMjEwMS4zMDAxLjcwMjA=\">benchmark</span> 数据可以看出在一些综合场景下比  <code>npm/yarn</code>  快了大概两倍。</p>\n<h3 id=\"常用命令对比\"><a class=\"markdownIt-Anchor\" href=\"#常用命令对比\">#</a> 常用命令对比</h3>\n<table>\n<thead>\n<tr>\n<th>npm 命令</th>\n<th>pnpm 等价命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$ npm install</code></td>\n<td><code>$ pnpm install</code>  安装全部依赖</td>\n</tr>\n<tr>\n<td><code>$ npm install 包名</code></td>\n<td><code>$ pnpm add (-D) 包名</code>  安装指定包</td>\n</tr>\n<tr>\n<td><code>$ npm uninstall 包名</code></td>\n<td><code>$ pnpm remove 包名</code>  移除指定包</td>\n</tr>\n<tr>\n<td><code>$ npm run 脚本</code></td>\n<td><code>$ pnpm 脚本</code>  运行脚本</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/08/20/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%B8%ADplugin%E4%B8%8Eloader%E5%85%A5%E9%97%A8%E8%AE%B2%E8%A7%A3/",
            "url": "http://example.com/2023/08/20/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%B8%ADplugin%E4%B8%8Eloader%E5%85%A5%E9%97%A8%E8%AE%B2%E8%A7%A3/",
            "title": "webpack中plugin与loader入门讲解",
            "date_published": "2023-08-19T19:33:25.728Z",
            "content_html": "<h2 id=\"loader-概念\"><a class=\"markdownIt-Anchor\" href=\"#loader-概念\">#</a> loader 概念</h2>\n<p>帮助 webpack 将不同类型的文件转换为 webpack 可识别的模块</p>\n<h2 id=\"loader-执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#loader-执行顺序\">#</a> loader 执行顺序</h2>\n<p>分类:</p>\n<ul>\n<li>pre: 前置 loader</li>\n<li>normal: 普通 loader</li>\n<li>inline: 内联 loader</li>\n<li>post: 后置 loader</li>\n</ul>\n<p>pre &gt; normal &gt; inline &gt; post</p>\n<p>相同优先级 loader 执行顺序为从右到左，从上到下</p>\n<p>如果想要更改执行顺序，可以通过配置 loader 的执行顺序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有 enforce 就是normal loader</span></span><br><span class=\"line\">    <span class=\"attr\">enforce</span>: <span class=\"string\">&quot;pre&quot;</span> | <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"开发loader\"><a class=\"markdownIt-Anchor\" href=\"#开发loader\">#</a> 开发 loader</h2>\n<h3 id=\"第一个-loader\"><a class=\"markdownIt-Anchor\" href=\"#第一个-loader\">#</a> 第一个 loader</h3>\n<p>创建 <code>loaders/test-loader.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loaders/test-loader.js</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  loader 就是一个函数</span></span><br><span class=\"line\"><span class=\"comment\">  当 webpack 解析资源时，会调用相关的loader去处理</span></span><br><span class=\"line\"><span class=\"comment\">  loader 接受文件内容为参数，返回内容出去</span></span><br><span class=\"line\"><span class=\"comment\">  loader 函数的返回值，会作为下一个 loader 的参数</span></span><br><span class=\"line\"><span class=\"comment\">  map -&gt; SourceMap</span></span><br><span class=\"line\"><span class=\"comment\">  meta 别的 loader 传递过来的数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content,map,meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// content 为处理的文件内容</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(content)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack.config.js 中配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;./dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;js/[name].js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;./loaders/test-loader.js&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;public/index.html&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"loader-定义方式\"><a class=\"markdownIt-Anchor\" href=\"#loader-定义方式\">#</a> loader 定义方式</h3>\n<h4 id=\"同步-loader\"><a class=\"markdownIt-Anchor\" href=\"#同步-loader\">#</a> 同步 loader</h4>\n<p>新建  <code>loaders/demo/test1.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步loader</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.exports = function (contnet) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return content</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 第一个参数, err 代表是否有错误</span></span><br><span class=\"line\"><span class=\"comment\">   * 第二个参数, content 处理后的内容</span></span><br><span class=\"line\"><span class=\"comment\">   * 第三个参数, source-map 继续传递source-map</span></span><br><span class=\"line\"><span class=\"comment\">   * 第四个参数, meta 给下一个 loader 传递参数</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map, meta)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步-loader\"><a class=\"markdownIt-Anchor\" href=\"#异步-loader\">#</a> 异步 loader</h4>\n<p>新建  <code>loaders/demo/test2.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content, map, meta</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> callback = <span class=\"variable language_\">this</span>.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(<span class=\"literal\">null</span>, content, map, meta)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步 loader 需要调用  <code>this.async()</code>  方法，返回一个 callback 函数。<br>\n它会等异步操作做完再执行后面的 loader</p>\n<h3 id=\"raw-loader\"><a class=\"markdownIt-Anchor\" href=\"#raw-loader\">#</a> raw loader</h3>\n<p>新建  <code>loaders/demo/test3.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// raw loader 接受的 content 是 Buffer 数据</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">raw</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>raw loader 既可以是同步 loader 也可以是异步 loader</p>\n<h3 id=\"pitch-loader\"><a class=\"markdownIt-Anchor\" href=\"#pitch-loader\">#</a> pitch loader</h3>\n<p>新建  <code>loaders/demo/test4.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> content</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">pitch</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这个函数会提前执行</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;pitch&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * use [1,2,3]</span></span><br><span class=\"line\"><span class=\"comment\"> * pitchfunc [p1,p2,p3]</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * p1,p2,p3,3,2,1</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果在 p1 中 return</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * p1,p2,1</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果没有1,顺序</span></span><br><span class=\"line\"><span class=\"comment\"> * p1,p2</span></span><br><span class=\"line\"><span class=\"comment\"> * 这种机制被称为熔断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"loader-api\"><a class=\"markdownIt-Anchor\" href=\"#loader-api\">#</a> loader API</h2>\n<ul>\n<li>this.async () 异步回调 loader，返回 this.callback</li>\n<li>this.callback (err,content.sourceMap?,meta?) 可以同步或异步调用，返回多个结果的函数</li>\n<li>this.getOptions (schema) 获取 loader 的配置</li>\n<li>this.emitFile (name,content,sourceMap) 创建一个文件</li>\n<li>this.utils.contextify (context,request) 返回一个相对路径</li>\n<li>this.utils.absolutify (context,request) 返回一个绝对路径</li>\n</ul>\n<h2 id=\"plugin\"><a class=\"markdownIt-Anchor\" href=\"#plugin\">#</a> Plugin</h2>\n<p>通过插件我们可以扩展 webpack，加入自定义的构建行为，使 webpack 可以执行更广泛的任务，拥有更强的构建能力。<br>\nwebpack 在编译代码过程中，会触发一系列 Tapable 钩子事件，插件所做的，就是找到相应的钩子，往上面挂上自己的任务，也就是注册事件，这样，当 webpack 构建的时候，插件注册的事件就会随着钩子的触发而执行了。</p>\n<h3 id=\"tapable\"><a class=\"markdownIt-Anchor\" href=\"#tapable\">#</a> Tapable</h3>\n<p>Tapable 为 webpack 提供了统一的插件接口（钩子）类型定义，它是 webpack 的核心功能库。webpack 中目前有十种 hooks，在 Tapable 源码中可以看到，他们是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/webpack/tapable/blob/master/lib/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">SyncHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./SyncHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">SyncBailHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./SyncBailHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">SyncWaterfallHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./SyncWaterfallHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">SyncLoopHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./SyncLoopHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncParallelHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncParallelHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncParallelBailHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncParallelBailHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncSeriesHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncSeriesHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncSeriesBailHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncSeriesBailHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncSeriesLoopHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncSeriesLoopHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">AsyncSeriesWaterfallHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./AsyncSeriesWaterfallHook&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">HookMap</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./HookMap&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">MultiHook</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./MultiHook&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Tapable 还统一暴露了三个方法给插件，用于注入不同类型的自定义构建行为：</p>\n<ul>\n<li>tap：可以注册同步钩子和异步钩子。</li>\n<li>tapAsync：回调方式注册异步钩子。</li>\n<li>tapPromise：Promise 方式注册异步钩子。</li>\n</ul>\n<h3 id=\"plugin-构建对象\"><a class=\"markdownIt-Anchor\" href=\"#plugin-构建对象\">#</a> Plugin 构建对象</h3>\n<h4 id=\"compiler\"><a class=\"markdownIt-Anchor\" href=\"#compiler\">#</a> Compiler</h4>\n<p>compiler 对象中保存着完整的 Webpack 环境配置，每次启动 webpack 构建时它都是一个独一无二，仅仅会创建一次的对象。</p>\n<p>这个对象会在首次启动 Webpack 时创建，我们可以通过 compiler 对象上访问到 Webapck 的主环境配置，比如 loader 、 plugin 等等配置信息。</p>\n<p>它有以下主要属性：</p>\n<ul>\n<li>compiler.options 可以访问本次启动 webpack 时候所有的配置文件，包括但不限于 loaders 、 entry 、 output 、 plugin 等等完整配置信息。</li>\n<li>compiler.inputFileSystem 和 compiler.outputFileSystem 可以进行文件操作，相当于 Nodejs 中 fs。</li>\n<li>compiler.hooks 可以注册 tapable 的不同种类 Hook，从而可以在 compiler 生命周期中植入不同的逻辑。</li>\n</ul>\n<h4 id=\"compilation\"><a class=\"markdownIt-Anchor\" href=\"#compilation\">#</a> Compilation</h4>\n<p>compilation 对象代表一次资源的构建，compilation 实例能够访问所有的模块和它们的依赖。</p>\n<p>一个 compilation 对象会对构建依赖图中所有模块，进行编译。 在编译阶段，模块会被加载 (load)、封存 (seal)、优化 (optimize)、 分块 (chunk)、哈希 (hash) 和重新创建 (restore)。</p>\n<p>它有以下主要属性：</p>\n<ul>\n<li>compilation.modules 可以访问所有模块，打包的每一个文件都是一个模块。</li>\n<li>compilation.chunks chunk 即是多个 modules 组成而来的一个代码块。入口文件引入的资源组成一个 chunk，通过代码分割的模块又是另外的 chunk。</li>\n<li>compilation.assets 可以访问本次打包生成所有文件的结果。</li>\n<li>compilation.hooks 可以注册 tapable 的不同种类 Hook，用于在 compilation 编译模块阶段进行逻辑添加以及修改。</li>\n</ul>\n<h4 id=\"生命周期简图\"><a class=\"markdownIt-Anchor\" href=\"#生命周期简图\">#</a> 生命周期简图</h4>\n<p><img data-src=\"https://yk2012.github.io/sgg_webpack5/imgs/source/plugin.jpg\" alt=\"\"></p>\n<h3 id=\"开发第一个插件\"><a class=\"markdownIt-Anchor\" href=\"#开发第一个插件\">#</a> 开发第一个插件</h3>\n<p>创建  <code>plugins/test-plugin.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. webpack加载配置,此时new TestPlugin,执行constructor</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 创建compiler对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 编译所有插件，调用插件的apply方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 执行剩下的编译流程(触发各个hooks事件)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestPlugin</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test constructor&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">apply</span>(<span class=\"params\">compiler</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test apply&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(compiler)</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"comment\">// 由文档知,environment是同步钩子，需要tap注册</span></span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">environment</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin environment&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 由文档知,emit是异步串行钩子(可以异步，但多个异步钩子必须按顺序执行)</span></span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin emit&quot;</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(compilation)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin emit async&quot;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>() <span class=\"comment\">// 调用callback才代表函数执行完毕</span></span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">emit</span>.<span class=\"title function_\">tapPromise</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin emit promise&quot;</span>)</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 由文档知,make是异步并行钩子(多个异步钩子同时触发,谁先做完谁先调用)</span></span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">make</span>.<span class=\"title function_\">tapAsync</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin make async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 需要在compilation hooks触发前注册</span></span><br><span class=\"line\">        compilation.<span class=\"property\">hooks</span>.<span class=\"property\">seal</span>.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin seal&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>() <span class=\"comment\">// 调用callback才代表函数执行完毕</span></span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    compiler.<span class=\"property\">hooks</span>.<span class=\"property\">make</span>.<span class=\"title function_\">tapPromise</span>(<span class=\"string\">&quot;TestPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TestPlugin make promise&quot;</span>)</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">TestPlugin</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"观测compiler-和-compilation\"><a class=\"markdownIt-Anchor\" href=\"#观测compiler-和-compilation\">#</a> 观测 compiler 和 compilation</h3>\n<p>compiler 和 compilation 属性和方法太多，我们难以在终端之中观测，并且也不方便我们学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;debug&quot;</span>: <span class=\"string\">&quot;node --inspect-brk ./node_modules/webpack-cli/bin/cli.js&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>启动</strong><br>\n打开任意 Chorme 窗口，f12 启动开发者工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run debug</span><br></pre></td></tr></table></figure>\n<p>然后就会发现开发者工具左上角出现了一个绿色的 node 图标，点进去就会进入 nodejs 的开发者工具</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/08/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2023/08/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/",
            "title": "webpack入门指南",
            "date_published": "2023-08-17T20:12:37.879Z",
            "content_html": "<h2 id=\"为什么需要打包工具\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要打包工具\">#</a> 为什么需要打包工具</h2>\n<blockquote>\n<p>开发时，我们会使用框架 (React, Vue), ES6 模块化语法，Less/Sass 预处理器等语法进行开发，这样代码想要在浏览器运行时必须经过编译成浏览器能识别的 JS, CSS, HTML 等，才能运行。<br>\n所以我们需要打包工具帮助我们完成这些事<br>\n除此，打包工具还能进行压缩代码，做兼容性处理，提升代码性能等</p>\n</blockquote>\n<h2 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<blockquote>\n<p>它会以一个或多个文件作为打包的入口，将整个项目所有文件组合成一个或多个文件输出出去。输出的文件就是编译好的文件。<br>\n打包工具一般会输出一个或多个文件，这些文件就是编译后的文件，我们一般会将其称为 bundle</p>\n</blockquote>\n<h2 id=\"功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能介绍\">#</a> 功能介绍</h2>\n<p>Webpack 本身功能是有限的</p>\n<ul>\n<li>开发模式：仅能编译 JS 中的  <code>ES Module</code>  语法</li>\n<li>生产模式：能编译 JS 中的  <code>ES Module</code>  语法，还能压缩 JS 代码</li>\n</ul>\n<h2 id=\"创建目录\"><a class=\"markdownIt-Anchor\" href=\"#创建目录\">#</a> 创建目录</h2>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- src</span><br><span class=\"line\">  - main.js</span><br><span class=\"line\">  - js</span><br><span class=\"line\">    - count.js</span><br><span class=\"line\">    - sum.js</span><br><span class=\"line\">- public</span><br><span class=\"line\">    - index.html</span><br></pre></td></tr></table></figure>\n<p>public/index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../src/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>src/main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>src/js/count.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>src/js/sum.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc + cur, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们打开  <code>public/index.html</code>  时，控制台会报错 <code>Uncaught SyntaxError: Cannot use import statement outside a module</code> ，因为浏览器不认识 <code>ES6 Module</code>  的语法。<br>\n这时，我们就需要使用 Webpack 来编译打包我们的代码，使浏览器可以识别。</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包\"><a class=\"markdownIt-Anchor\" href=\"#打包\">#</a> 打包</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack ./src/main.js --mode=development // 开发模式</span><br></pre></td></tr></table></figure>\n<p>然后就会在根目录下出现一个 dist 目录，里面有一个 main.js 文件，这就是我们打包后的文件。<br>\n我们更改一下我们的 pubilc/index.html 文件，把 <code>&lt;script src=&quot;../src/main.js&quot;&gt;&lt;/script&gt;</code>  改成 <code>&lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后浏览器就可以运行了。<br>\n当你查看 dist/main.js 文件时，会发现里面多了很多东西，我们看不懂。<br>\n我们现在使用生产模式进行打包，生产模式会进行代码压缩。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack ./src/main.js --mode=production //  生产模式</span><br></pre></td></tr></table></figure>\n<p>压缩之后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;use strict&quot;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>), <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">o, e</span>) =&gt;</span> o + e, <span class=\"number\">0</span>))</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心概念\"><a class=\"markdownIt-Anchor\" href=\"#核心概念\">#</a> 核心概念</h2>\n<ul>\n<li>entry：入口文件，Webpack 执行构建的第一步从 entry 开始，可抽象成输入。</li>\n<li>output：输出文件，Webpack 执行构建的最后一步输出文件，可抽象成输出。</li>\n<li>module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。</li>\n<li>loader：webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要配置 loader 转换器。</li>\n<li>plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑。</li>\n<li>mode: 模式，模式指定了 webpack 使用相应环境下的配置。</li>\n</ul>\n<h2 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>名字固定:  <code>webpack.config.js</code> <br>\n 配置文件都是在  <code>nodeJS</code>  环境下运行的，都是 <code>CommonJS</code>  规范。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>, <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件的输出路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// 绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// 文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// plugin的配置</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>, <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了配置文件，打包命令就可以简化了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理样式资源\"><a class=\"markdownIt-Anchor\" href=\"#处理样式资源\">#</a> 处理样式资源</h2>\n<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要配置 loader 转换器。</p>\n<h3 id=\"处理-css-资源\"><a class=\"markdownIt-Anchor\" href=\"#处理-css-资源\">#</a> 处理 CSS 资源</h3>\n<p>添加  <code>src/css/index.css</code>  文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改  <code>src/main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>安装  <code>css-loader</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure>\n<p>然后在配置文件中配置  <code>css-loader</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 加载器</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// loader的配置</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">// 只检测.css结尾的文件,当匹配时调用use</span></span><br><span class=\"line\">        <span class=\"comment\">// use执行顺序从右到左，从下到上</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"comment\">// 将js中css通过创建style标签的形式添加到html文件中</span></span><br><span class=\"line\">          <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"comment\">// 将css资源编译成commonjs的模块到js中</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理less资源\"><a class=\"markdownIt-Anchor\" href=\"#处理less资源\">#</a> 处理 less 资源</h3>\n<p>添加  <code>src/less/index.less</code>  文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: deeppink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改  <code>src/main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>安装  <code>less-loader</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i less-loader less -D</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">  <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// compiles Less to CSS</span></span><br><span class=\"line\">    <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;less-loader&quot;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理sass资源\"><a class=\"markdownIt-Anchor\" href=\"#处理sass资源\">#</a> 处理 sass 资源</h3>\n<p>修改  <code>src/sass/index.scss</code>  文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: hotpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改  <code>src/main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.scss&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>安装  <code>sass-loader</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sass-loader sass -D</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/i</span>,</span><br><span class=\"line\">  <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 将 JS 字符串生成为 style 节点</span></span><br><span class=\"line\">    <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 将 CSS 转化成 CommonJS 模块</span></span><br><span class=\"line\">    <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 将 Sass 编译成 CSS</span></span><br><span class=\"line\">    <span class=\"string\">&quot;sass-loader&quot;</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理图片资源\"><a class=\"markdownIt-Anchor\" href=\"#处理图片资源\">#</a> 处理图片资源</h3>\n<p>webpack5 内置了 file-loader 和 url-loader，所以不需要再安装，会自动处理。<br>\n但我们有时需要对其进行一些优化。<br>\n添加  <code>src/images/1.png</code> <br>\n 修改  <code>src/css/index.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;../images/1.png&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改  <code>public/index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需求</strong>：我们想把小图片转为 base64, 减少 http 请求。大图片不转换为 base64, 减少打包体积。<br>\n修改配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 小于8kb的图片转base64</span></span><br><span class=\"line\">      <span class=\"attr\">maxSize</span>: <span class=\"number\">8</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 8kb</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改输出目录\"><a class=\"markdownIt-Anchor\" href=\"#修改输出目录\">#</a> 修改输出目录</h3>\n<p>当打包的文件多了，如果都打包到一个文件下，会显得很乱<br>\n所以需要进行输出目录配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件的输出路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// 绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// 入口文件(一般为js文件)打包输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 小于8kb的图片转base64</span></span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">8</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 8kb</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 输出图片名称</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/images/[hash:10][ext][query]&quot;</span>, <span class=\"comment\">// 图片名称,[hash:10]表示hash值的长度为10位,[ext]表示文件后缀,[query]表示文件名</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"清空上次打包内容\"><a class=\"markdownIt-Anchor\" href=\"#清空上次打包内容\">#</a> 清空上次打包内容</h3>\n<p>如果我们不加以配置，每次观看最新的打包效果，都需要手动删除之前的 dist 文件夹，这样很麻烦，所以需要配置清空上次打包内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件的输出路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname代表当前文件的文件夹目录</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>), <span class=\"comment\">// 绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// 入口文件(一般为js文件)打包输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 打包前先清空输出目录</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理字体图标资源\"><a class=\"markdownIt-Anchor\" href=\"#处理字体图标资源\">#</a> 处理字体图标资源</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出图片名称</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/media/[hash][ext][query]&quot;</span>, <span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理其他资源\"><a class=\"markdownIt-Anchor\" href=\"#处理其他资源\">#</a> 处理其他资源</h3>\n<p>比如音视频等资源<br>\n在处理字体图标资源的 test 匹配后面加相关后缀即可</p>\n<h3 id=\"处理js资源\"><a class=\"markdownIt-Anchor\" href=\"#处理js资源\">#</a> 处理 js 资源</h3>\n<p>Webpack 本身对于 js 的处理是有限的，只能处理 ES 模块化语法，所以我们需要进行一些处理。</p>\n<ul>\n<li>针对 js 兼容性采用 Babel 来完成</li>\n<li>针对代码格式，采用 Eslint 来完成</li>\n</ul>\n<h3 id=\"eslint\"><a class=\"markdownIt-Anchor\" href=\"#eslint\">#</a> eslint</h3>\n<p>可组装的 JavaScript 和 JSX 检查工具。<br>\n关键是写 eslint 的配置文件<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint eslint-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ESLintPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;eslint-webpack-plugin&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// plugin的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检测的文件</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<p>添加 eslint 配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslintrc or .eslintrc.js or .eslintrc.json区别在于配置格式不一样</span></span><br><span class=\"line\"><span class=\"comment\">// .eslintrc.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承 Eslint 规则</span></span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;eslint:recommended&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用node中的全局变量</span></span><br><span class=\"line\">    <span class=\"attr\">browser</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用浏览器中的全局变量</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">6</span>, <span class=\"comment\">// 指定ECMAScript的版本</span></span><br><span class=\"line\">    <span class=\"attr\">sourceType</span>: <span class=\"string\">&quot;module&quot;</span>, <span class=\"comment\">// 指定源代码的类型，module表示CommonJS的模块化规范，script表示ECMAScript的规范</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;no-var&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 不能使用 var 定义变量</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.eslintignore</code>  可以配置忽略检查的目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist</span><br><span class=\"line\">node_modules</span><br></pre></td></tr></table></figure>\n<h3 id=\"babel\"><a class=\"markdownIt-Anchor\" href=\"#babel\">#</a> babel</h3>\n<p>主要用于将 ES6 语法编写的代码转换为向后兼容的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js or babel.config.json or .babalrc or .babalrc.js or .babalrc.json</span></span><br><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 智能预设，能编译ES6语法</span></span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">// 排除node_modules的js文件不处理</span></span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>, <span class=\"comment\">// 使用babel-loader</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理-html-资源\"><a class=\"markdownIt-Anchor\" href=\"#处理-html-资源\">#</a> 处理 html 资源</h3>\n<p>我们希望有一个插件来自动引入 script，而不是自己手动修改  <code>index.html</code>  文件<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 模板，以public/index.html文件创建心得html文件</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. 结构和原来一致，会自动引入打包的资源</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;public/index.html&quot;</span>),</span><br><span class=\"line\">    &#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建开发服务器\"><a class=\"markdownIt-Anchor\" href=\"#搭建开发服务器\">#</a> 搭建开发服务器</h2>\n<p>每次改代码都需要打包才能看到效果，实在是太麻烦了，我们希望每次保存之后自动重新打包。<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机地址</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"comment\">// 端口</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p><strong>启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack serve</span><br></pre></td></tr></table></figure>\n<h2 id=\"生产模式优化\"><a class=\"markdownIt-Anchor\" href=\"#生产模式优化\">#</a> 生产模式优化</h2>\n<p>我们把生产模式和开发模式分别用配置文件<br>\n创建  <code>config</code>  目录<br>\n把  <code>webpack.config.js</code>  移入  <code>config</code>  目录，并改名为  <code>webpack.config.dev.js</code> <br>\n 再复制一份  <code>webpack.config.dev.js</code>  改名为  <code>webpack.config.prod.js</code> <br>\n <code>webpack.config.prod.js</code>  和 <code>webpack.config.dev.js</code>  中所有绝对路径都需要回退一层目录<br>\n <code>webpack.config.prod.js</code>  不需要 <code>devServer</code> , 可以删除， <code>mode</code>  改为 &quot;production&quot;<br>\n <code>webpack.config.dev.js</code>  修改  <code>output</code>  的绝对路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">path</span>: <span class=\"literal\">undefined</span>,<span class=\"comment\">// 开发模式没有输出</span></span><br></pre></td></tr></table></figure>\n<p>运行某个配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack --config config/webpack.config.prod.js</span><br><span class=\"line\">npx webpack server --config config/webpack.config.dev.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取-css-为单独文件\"><a class=\"markdownIt-Anchor\" href=\"#提取-css-为单独文件\">#</a> 提取 CSS 为单独文件</h3>\n<p>现在 CSS 是通过 js 进行添加，这会导致闪屏现象<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 把所有的 &quot;style-loader&quot; 替换成 MiniCssExtractPlugin.loader</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/css/main.css&quot;</span>,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"css-兼容性处理\"><a class=\"markdownIt-Anchor\" href=\"#css-兼容性处理\">#</a> CSS 兼容性处理</h3>\n<p><strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n<p>postcss 要在  <code>css-loader</code>  后面，在  <code>less-loader</code>  前面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&quot;postcss-loader&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">postcssOptions</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;postcss-preset-env&quot;</span>, <span class=\"comment\">// 解决大多数样式兼容问题</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里要看到效果还需要修改  <code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;browserslist&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;last 2 version&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&gt; 1%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;not dead&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩-css\"><a class=\"markdownIt-Anchor\" href=\"#压缩-css\">#</a> 压缩 CSS</h3>\n<p><strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CssMinimizerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CssMinimizerPlugin</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩-js-和-html\"><a class=\"markdownIt-Anchor\" href=\"#压缩-js-和-html\">#</a> 压缩 JS 和 html</h3>\n<p>默认生产模式会对 JS 和 html 进行压缩</p>\n<h2 id=\"提升开发体验优化\"><a class=\"markdownIt-Anchor\" href=\"#提升开发体验优化\">#</a> 提升开发体验优化</h2>\n<h3 id=\"source-map源代码映射\"><a class=\"markdownIt-Anchor\" href=\"#source-map源代码映射\">#</a> Source Map (源代码映射)</h3>\n<p>打包之后的代码我们很难看懂，不好调试，我们希望我们可以去调试打包之后的代码，以提高开发体验。<br>\nSourceMap 会生成 xx.map，里面包含源代码和构建后代码每一行的映射关系，浏览器在运行打包后的代码时，如果遇到报错，会去查找对应的 SourceMap 文件，然后把报错位置映射到源代码上，这样就便于我们进行调试了。<br>\nSourceMap 有很多格式，但实际开发只需要关注两种情况</p>\n<ul>\n<li>开发模式：cheap-module-source-map<br>\n 打包速度快，只包含行映射</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.dev.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;cheap-module-source-map&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生产模式：source-map<br>\n 包含列，行，源代码，构建后代码的源代码位置映射，但打包速度慢</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.prod.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hotmodulereplacementhmr\"><a class=\"markdownIt-Anchor\" href=\"#hotmodulereplacementhmr\">#</a> HotModuleReplacement(HMR)</h3>\n<p>HMR 允许在运行时更新各种模块，而无需完全刷新。<br>\n原本更改一个模块会重新打包所有模块，HMR 会使用之前打包的结果，只更新有变化的模块，大大提高了开发效率。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机地址</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"comment\">// 端口</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启HMR</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>在 Webpack5 中，HMR 默认是开启的，不需要进行显式的配置<br>\n但 js 更改还是会整页刷新，如果想要 js 也开启</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果支持热更新</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count.js&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"property\">hot</span>.<span class=\"title function_\">accept</span>(<span class=\"string\">&quot;./js/count.js&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这样写会很麻烦<br>\n在实际开发中我们会使用其他 loader 来解决<br>\n比如：  <code>vue-loader</code> , <code>react-hot-loader</code></p>\n<h3 id=\"oneof\"><a class=\"markdownIt-Anchor\" href=\"#oneof\">#</a> OneOf</h3>\n<p>OneOf 可以让 loader 只运行一次，如果多个 loader 对同一个文件生效，那么只会运行第一个，后面的会被忽略。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// 每个文件只能被其中一个loader处理</span></span><br><span class=\"line\">      <span class=\"attr\">oneOf</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面配置了两个 css-loader，但只会运行第一个，因为第二个被 OneOf 给忽略掉了</p>\n<h3 id=\"includeexclude\"><a class=\"markdownIt-Anchor\" href=\"#includeexclude\">#</a> include/exclude</h3>\n<p>include 指定一个文件夹，文件夹下的文件会全部打包，不会忽略<br>\n exclude 指定一个文件夹，文件夹下的文件不会打包，会忽略</p>\n<h3 id=\"cache缓存\"><a class=\"markdownIt-Anchor\" href=\"#cache缓存\">#</a> cache (缓存)</h3>\n<p>每次打包都要经过 eslint 检查和 babel 编译，如果每次都重新编译，会非常消耗性能，所以需要缓存。<br>\n当然，主要是 js 需要缓存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">// 排除node_modules的js文件不处理</span></span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>, <span class=\"comment\">// 使用babel-loader</span></span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"thead\"><a class=\"markdownIt-Anchor\" href=\"#thead\">#</a> Thead</h3>\n<p>多线程打包，可以加快打包速度<br>\n我们启动进程的数量就是我们 CPU 的核数<br>\n获取 CPU 核数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cpus = os.<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install thread-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;os&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> threads = os.<span class=\"title function_\">cpus</span>().<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"comment\">// webpack内置压缩plugin</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserWebpackPlugin</span> = <span class=\"title function_\">require</span>(<span class=\"params\"><span class=\"string\">&quot;terser-webpack-plugin&quot;</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"comment\">// 排除node_modules的js文件不处理</span></span><br><span class=\"line\">  <span class=\"attr\">use</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&quot;thread-loader&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">works</span>: threads, <span class=\"comment\">// 开启几个线程</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">        <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,,</span><br><span class=\"line\">  ], <span class=\"comment\">// 使用babel-loader</span></span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// plugin的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ESLintPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指定检测的文件</span></span><br><span class=\"line\">      <span class=\"attr\">context</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;../src&quot;</span>),</span><br><span class=\"line\">      threads,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">TerserWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">parallel</span>: threads,</span><br><span class=\"line\">    &#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"减少代码体积\"><a class=\"markdownIt-Anchor\" href=\"#减少代码体积\">#</a> 减少代码体积</h2>\n<h3 id=\"treesaking\"><a class=\"markdownIt-Anchor\" href=\"#treesaking\">#</a> TreeSaking</h3>\n<p>TreeSaking 是一个 webpack 插件，它能够分析出你的代码中那些部分是永远不会被用到，然后剔除掉这部分。<br>\nwebpack 默认开启</p>\n<h3 id=\"处理babel\"><a class=\"markdownIt-Anchor\" href=\"#处理babel\">#</a> 处理 Babel</h3>\n<p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大<br>\n我们可以将它们作为一个独立模块来避免重复引入<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/webpack.config.prod.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启缓存</span></span><br><span class=\"line\">    <span class=\"attr\">cacheCompression</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 关闭缓存文件压缩</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class=\"comment\">// 开启babel-plugin-transform-runtime</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"code-split代码分割\"><a class=\"markdownIt-Anchor\" href=\"#code-split代码分割\">#</a> Code Split (代码分割)</h3>\n<p>打包会将所有 js 文件打包到一个文件，导致加载时间过长，我们可以将代码拆分成多个文件，然后按需加载。</p>\n<h4 id=\"多入口\"><a class=\"markdownIt-Anchor\" href=\"#多入口\">#</a> 多入口</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">entry</span>: [</span><br><span class=\"line\">  <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,<span class=\"comment\">// 以[name]自己的文件名作为文件名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多入口公共模块\"><a class=\"markdownIt-Anchor\" href=\"#多入口公共模块\">#</a> 多入口公共模块</h4>\n<p>多入口文件的公共的代码提升为公共模块单独打包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">entry</span>: [</span><br><span class=\"line\">  <span class=\"attr\">app</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">main</span>: <span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,<span class=\"comment\">// 以[name]自己的文件名作为文件名</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代码分割配置</span></span><br><span class=\"line\">  <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// 所有模块都进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// minSize: 30000, // 模块大于30kb才进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// maxSize: 0, // 最大尺寸0</span></span><br><span class=\"line\">    <span class=\"comment\">// minChunks: 1, // 最少使用过一次就进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// maxAsyncRequests: 5, // 异步加载chunk的并发请求数量最多为5个</span></span><br><span class=\"line\">    <span class=\"comment\">// maxInitialRequests: 3, // 入口文件最多只能初始加载3个chunk</span></span><br><span class=\"line\">    <span class=\"comment\">// automaticNameDelimiter: &#x27;~&#x27;, // 命名分隔符</span></span><br><span class=\"line\">    <span class=\"comment\">// enforeSizeThreshold: 50000, // 模块大于50kb强制打包</span></span><br><span class=\"line\">    <span class=\"comment\">// name: true, // 缓存组名</span></span><br><span class=\"line\">    <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 缓存组</span></span><br><span class=\"line\">      <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 模块大于0kb才进行分割</span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 最小使用过一次就进行分割</span></span><br><span class=\"line\">        <span class=\"attr\">priority</span>: -<span class=\"number\">20</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">        <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果当前的chunk包含的模块已经被其他chunk包含了，那么将不会再次被引入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"按需加载动态导入\"><a class=\"markdownIt-Anchor\" href=\"#按需加载动态导入\">#</a> 按需加载，动态导入</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import动态导入，会将动态导入的文件代码分割(分割成单独文件)，在需要使用的时候自动加载</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;btn&quot;</span>).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./count&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;模块加载成功&quot;</span>,res.<span class=\"title function_\">default</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;模块加载失败&quot;</span>,err)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单入口\"><a class=\"markdownIt-Anchor\" href=\"#单入口\">#</a> 单入口</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代码分割配置</span></span><br><span class=\"line\">  <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;all&#x27;</span>, <span class=\"comment\">// 所有模块都进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// minSize: 30000, // 模块大于30kb才进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// maxSize: 0, // 最大尺寸0</span></span><br><span class=\"line\">    <span class=\"comment\">// minChunks: 1, // 最少使用过一次就进行分割</span></span><br><span class=\"line\">    <span class=\"comment\">// maxAsyncRequests: 5, // 异步加载chunk的并发请求数量最多为5个</span></span><br><span class=\"line\">    <span class=\"comment\">// maxInitialRequests: 3, // 入口文件最多只能初始加载3个chunk</span></span><br><span class=\"line\">    <span class=\"comment\">// automaticNameDelimiter: &#x27;~&#x27;, // 命名分隔符</span></span><br><span class=\"line\">    <span class=\"comment\">// enforeSizeThreshold: 50000, // 模块大于50kb强制打包</span></span><br><span class=\"line\">    <span class=\"comment\">// name: true, // 缓存组名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"给动态导入的文件取名\"><a class=\"markdownIt-Anchor\" href=\"#给动态导入的文件取名\">#</a> 给动态导入的文件取名</h3>\n<p>动态导入时要取名<br>\n <code>import(/* weebpackChunkName: &quot;math&quot; */ &quot;./js/math&quot;)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;static/js/[name].js&#x27;</span>, <span class=\"comment\">// 动态导入的文件名</span></span><br><span class=\"line\">  <span class=\"comment\">// 图片，字体等通过type:&quot;asset&quot;处理的资源</span></span><br><span class=\"line\">  <span class=\"attr\">assetModuleFilename</span>: <span class=\"string\">&quot;static/media/[name].[hash][ext]&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"preloadprefetch\"><a class=\"markdownIt-Anchor\" href=\"#preloadprefetch\">#</a> Preload/Prefetch</h3>\n<p>我们想要在浏览器空闲时间去加载后续需要使用的资源<br>\n而不是在需要时才加载，如果资源太大，用户还是会感到卡顿</p>\n<ul>\n<li>Preload: 告诉浏览器立即加载</li>\n<li>Prefetch: 告诉浏览器在空闲时加载</li>\n</ul>\n<p>它们都只会加载资源，不执行<br>\n Preload 只能加载当前页面需要使用的资源，Prefetch 可以加载下一个页面需要使用的资源<br>\n ** 注意：** 它们兼容性比较差<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D preload-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">PreloadWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@vue/preload-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">PreloadWebpackPlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">rel</span>: <span class=\"string\">&#x27;preload&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">as</span>: <span class=\"string\">&#x27;script&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  new PreloadWebpackPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  rel: &#x27;prefetch&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"network-cache\"><a class=\"markdownIt-Anchor\" href=\"#network-cache\">#</a> Network Cache</h3>\n<p>如果 <code>main.js</code>  里面引入了 <code>sum.js</code>  并且打包时 <code>sum.js</code>  设置了 <code>hash</code>  值<br>\n如果 <code>sum.js</code>  发生变化，它的文件名的 <code>hash</code>  值就会发送变化<br>\n导致 <code>main.js</code>  也要重新打包。<br>\n所以我们希望有一个文件 a, 存储了 <code>sum.js</code>  的 <code>hash</code>  值， <code>main.js</code>  通过 a 去访问 <code>sum.js</code> , 这样无论 <code>sum.js</code>  的文件名的 <code>hash</code>  值怎么变都不会影响到 <code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">runtimeChunk</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"function\">(<span class=\"params\">entrypoint</span>) =&gt;</span> <span class=\"string\">`runtime~<span class=\"subst\">$&#123;entrypoint.name&#125;</span>.js`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"core-js\"><a class=\"markdownIt-Anchor\" href=\"#core-js\">#</a> core-js</h3>\n<p>虽然有了 babel , 但它无法处理 async, promise 对象时，它还是无法处理<br>\n core-js 是专门用来处理 ES6 以上的 API 的  <code>polyfill</code> <br>\n<strong> 安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i core-js</span><br></pre></td></tr></table></figure>\n<ul>\n<li>直接引入<br>\n然后在入口文件 <code>import 'core-js</code> <br>\n 但这样会使打包文件很大</li>\n<li>手动引入<br>\n <code>import 'core-js/es/promise</code></li>\n</ul>\n<p>如果我们想要按需加载，自动引入就需要取配置 babel</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>:&#123;</span><br><span class=\"line\">    [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/preset-env&quot;</span>,&#123;</span><br><span class=\"line\">        <span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span>,<span class=\"comment\">// 按需加载自动引入</span></span><br><span class=\"line\">        <span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwa渐进式网络应用程序\"><a class=\"markdownIt-Anchor\" href=\"#pwa渐进式网络应用程序\">#</a> PWA (渐进式网络应用程序)</h3>\n<p>我们希望给项目提供离线体验<br>\n<strong>安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D workbox-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p><strong>配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">WorkboxPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;workbox-webpack-plugin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">WorkboxPlugin</span>.<span class=\"title class_\">GenerateSW</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">clientsClaim</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">skipWaiting</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最后还要在主文件注册生成 <code>server worker</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/service-worker.js&#x27;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">registration</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registered: &#x27;</span>, registration)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">registrationError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SW registration failed: &#x27;</span>, registrationError)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}