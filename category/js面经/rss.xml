<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>汐月也自闭了的个人博客 • Posts by &#34;js面经&#34; category</title>
        <link>http://example.com</link>
        <description>这个需求写不了</description>
        <language>zh-CN</language>
        <pubDate>Mon, 18 Sep 2023 22:33:06 +0800</pubDate>
        <lastBuildDate>Mon, 18 Sep 2023 22:33:06 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/18/JS%E9%9D%A2%E7%BB%8F/var,let,const/</guid>
            <title>var,let,const</title>
            <link>http://example.com/2023/09/18/JS%E9%9D%A2%E7%BB%8F/var,let,const/</link>
            <pubDate>Mon, 18 Sep 2023 22:33:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;varletconst比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#varletconst比较&#34;&gt;#&lt;/a&gt; var,let,const 比较&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;var 在所有 ECMAScript 版本都能使用，let、const 只能在 ECMAScript6 和以后的版本使用。&lt;/li&gt;
&lt;li&gt;var 声明的变量会挂载在 window 对象上，let、const 声明的变量不会挂载在 window 对象上。&lt;/li&gt;
&lt;li&gt;var 声明的变量可以重复声明，let、const 声明的变量不能重复声明。&lt;/li&gt;
&lt;li&gt;var 声明的范围是函数作用域，let、const 声明的是块级作用域。&lt;/li&gt;
&lt;li&gt;let、const 相比 var，在块级作用域比函数作用域更早终止的情况下有助于垃圾回收提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么要引入块级作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要引入块级作用域&#34;&gt;#&lt;/a&gt; 为什么要引入块级作用域？&lt;/h2&gt;
&lt;p&gt;为了解决 var 声明变量具有变量提升特性的缺陷。&lt;/p&gt;
&lt;h2 id=&#34;变量提升是怎么造成的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变量提升是怎么造成的&#34;&gt;#&lt;/a&gt; 变量提升是怎么造成的？&lt;/h2&gt;
&lt;p&gt;因为 JS 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个 “准备工作”，js 在执行上下文的时候，会进行两个阶段：1. 分析 2. 执行，进入执行上下文时，首先会处理函数声明，其次会处理变量声明，在分析的过程中变量已经被声明挂在了变量对象上面，只不过没有具体赋值，所以这些变量和函数能在它们真正被声明之前使用。&lt;/p&gt;
&lt;h2 id=&#34;怎么解决变量提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎么解决变量提升&#34;&gt;#&lt;/a&gt; 怎么解决变量提升？&lt;/h2&gt;
&lt;p&gt;使用 let、const 代替 var 声明变量，在块级作用域里面 let、const 声明之前都被称为暂时性死区，这个区域里面引用后面才声明的变量都会报错。❗️暂时性死区会导致之前百分百安全的 typeof 不再安全。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
