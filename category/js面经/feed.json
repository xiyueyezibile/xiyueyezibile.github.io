{
    "version": "https://jsonfeed.org/version/1",
    "title": "汐月也自闭了的个人博客 • All posts by \"js面经\" category",
    "description": "这个需求写不了",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/18/JS%E9%9D%A2%E7%BB%8F/var,let,const/",
            "url": "http://example.com/2023/09/18/JS%E9%9D%A2%E7%BB%8F/var,let,const/",
            "title": "var,let,const",
            "date_published": "2023-09-18T14:33:06.313Z",
            "content_html": "<h2 id=\"varletconst比较\"><a class=\"markdownIt-Anchor\" href=\"#varletconst比较\">#</a> var,let,const 比较</h2>\n<ul>\n<li>var 在所有 ECMAScript 版本都能使用，let、const 只能在 ECMAScript6 和以后的版本使用。</li>\n<li>var 声明的变量会挂载在 window 对象上，let、const 声明的变量不会挂载在 window 对象上。</li>\n<li>var 声明的变量可以重复声明，let、const 声明的变量不能重复声明。</li>\n<li>var 声明的范围是函数作用域，let、const 声明的是块级作用域。</li>\n<li>let、const 相比 var，在块级作用域比函数作用域更早终止的情况下有助于垃圾回收提升性能。</li>\n</ul>\n<h2 id=\"为什么要引入块级作用域\"><a class=\"markdownIt-Anchor\" href=\"#为什么要引入块级作用域\">#</a> 为什么要引入块级作用域？</h2>\n<p>为了解决 var 声明变量具有变量提升特性的缺陷。</p>\n<h2 id=\"变量提升是怎么造成的\"><a class=\"markdownIt-Anchor\" href=\"#变量提升是怎么造成的\">#</a> 变量提升是怎么造成的？</h2>\n<p>因为 JS 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个 “准备工作”，js 在执行上下文的时候，会进行两个阶段：1. 分析 2. 执行，进入执行上下文时，首先会处理函数声明，其次会处理变量声明，在分析的过程中变量已经被声明挂在了变量对象上面，只不过没有具体赋值，所以这些变量和函数能在它们真正被声明之前使用。</p>\n<h2 id=\"怎么解决变量提升\"><a class=\"markdownIt-Anchor\" href=\"#怎么解决变量提升\">#</a> 怎么解决变量提升？</h2>\n<p>使用 let、const 代替 var 声明变量，在块级作用域里面 let、const 声明之前都被称为暂时性死区，这个区域里面引用后面才声明的变量都会报错。❗️暂时性死区会导致之前百分百安全的 typeof 不再安全。</p>\n",
            "tags": []
        }
    ]
}