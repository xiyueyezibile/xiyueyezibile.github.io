{
    "version": "https://jsonfeed.org/version/1",
    "title": "汐月也自闭了的个人博客 • All posts by \"umi\" category",
    "description": "这个需求写不了",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/15/Umimax%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/05/15/Umimax%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/",
            "title": "Umi max菜单设置问题",
            "date_published": "2023-05-15T13:39:03.435Z",
            "content_html": "<p>Umimax 根据路由来生产菜单侧边框</p>\n<p>分辨子路由和生成二级菜单只看有无名字</p>\n<p>如果不想让它出现在侧边框上则需要加上 <code>hideInMenu: true</code>  属性</p>\n<p>并且如果有二级菜单，请不要挂载父组件，不然会覆盖二级菜单挂载的子组件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/.<span class=\"property\">umirc</span>.<span class=\"property\">ts</span></span><br><span class=\"line\"><span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;首页&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"string\">&#x27;./Home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hideInMenu</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;权限演示&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/access&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"string\">&#x27;./Access&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27; CRUD 示例&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/table&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"string\">&#x27;./Table&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>:<span class=\"string\">&quot;/test&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">routes</span>:[&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;testchild&#x27;</span>,<span class=\"attr\">path</span>:<span class=\"string\">&#x27;Testchild&#x27;</span>,<span class=\"attr\">component</span>:<span class=\"string\">&#x27;./Test/Testchild&#x27;</span>&#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关配置\"><a class=\"markdownIt-Anchor\" href=\"#相关配置\">#</a> 相关配置</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新页面打开</span></span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;_blank&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 不展示顶栏</span></span><br><span class=\"line\">    <span class=\"attr\">headerRender</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 不展示页脚</span></span><br><span class=\"line\">    <span class=\"attr\">footerRender</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 不展示菜单</span></span><br><span class=\"line\">    <span class=\"attr\">menuRender</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 不展示菜单顶栏</span></span><br><span class=\"line\">    <span class=\"attr\">menuHeaderRender</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 权限配置，需要与 plugin-access 插件配合使用</span></span><br><span class=\"line\">    <span class=\"attr\">access</span>: <span class=\"string\">&#x27;canRead&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏子菜单</span></span><br><span class=\"line\">    <span class=\"attr\">hideChildrenInMenu</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏自己和子菜单</span></span><br><span class=\"line\">    <span class=\"attr\">hideInMenu</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 在面包屑中隐藏</span></span><br><span class=\"line\">    <span class=\"attr\">hideInBreadcrumb</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 子项往上提，仍旧展示,</span></span><br><span class=\"line\">    <span class=\"attr\">flatMenu</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/15/Umimax/",
            "url": "http://example.com/2023/05/15/Umimax/",
            "title": "Umi max详解",
            "date_published": "2023-05-15T13:37:56.514Z",
            "content_html": "<h2 id=\"全局初始状态\"><a class=\"markdownIt-Anchor\" href=\"#全局初始状态\">#</a> 全局初始状态</h2>\n<p>全局初始状态是一种特殊的 Model。</p>\n<p>全局初始状态在整个 Umi 项目的最开始创建。编写  <code>src/app.ts</code>  的导出方法  <code>getInitialState()</code> ，其返回值将成为全局初始状态。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchInitialData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/services/initial&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getInitialState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initialData = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchInitialData</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> initialData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，各种插件和您定义的组件都可以通过  <code>useModel('@@initialState')</code>  直接获取到这份全局的初始状态，如下所示：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useModel &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initialState, loading, error, refresh, setInitialState &#125; =    <span class=\"title function_\">useModel</span>(<span class=\"string\">&#x27;@@initialState&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>&#123;initialState&#125;<span class=\"tag\">&lt;/&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><code>initialState</code></th>\n<th><code>any</code></th>\n<th>导出的  <code>getInitialState()</code>  方法的返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>loading</code></td>\n<td><code>boolean</code></td>\n<td><code>getInitialState()</code>  或  <code>refresh()</code>  方法是否正在进行中。在首次获取到初始状态前，页面其他部分的渲染都会<strong>被阻止</strong></td>\n</tr>\n<tr>\n<td><code>error</code></td>\n<td><code>Error</code></td>\n<td>如果导出的  <code>getInitialState()</code>  方法运行时报错，报错的错误信息</td>\n</tr>\n<tr>\n<td><code>refresh</code></td>\n<td><code>() =&gt; void</code></td>\n<td>重新执行  <code>getInitialState</code>  方法，并获取新的全局初始状态</td>\n</tr>\n<tr>\n<td><code>setInitialState</code></td>\n<td><code>(state: any) =&gt; void</code></td>\n<td>手动设置  <code>initialState</code>  的值，手动设置完毕会将  <code>loading</code>  置为  <code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"usemodel\"><a class=\"markdownIt-Anchor\" href=\"#usemodel\">#</a>  <code>useModel</code></h3>\n<p><code>useModel()</code>  是一个钩子函数，提供了使用 Model 的能力。它接受两个参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>namespace</code></td>\n<td><code>String</code></td>\n<td>Model 文件的命名空间</td>\n</tr>\n<tr>\n<td><code>updater</code></td>\n<td><code>(model: any) =&gt; any</code></td>\n<td>可选参数。传入一个函数，函数的返回值为当前组件中需要使用到的 Model 状态或数据，并作为  <code>useModel()</code>  方法的返回值。对优化组件性能具有重要意义。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/components/AdminInfo/index.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useModel &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; user, fetchUser &#125; = <span class=\"title function_\">useModel</span>(<span class=\"string\">&#x27;adminModel&#x27;</span>, <span class=\"function\">(<span class=\"params\">model</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">user</span>: model.<span class=\"property\">admin</span>,</span><br><span class=\"line\">    <span class=\"attr\">fetchUser</span>: model.<span class=\"property\">fetchAdmin</span>,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>hello<span class=\"tag\">&lt;/&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"请求\"><a class=\"markdownIt-Anchor\" href=\"#请求\">#</a> 请求</h1>\n<p><code>@umijs/max</code>  内置了插件方案。它基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9heGlvcy1odHRwLmNvbS8=\">axios</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9haG9va3MtdjIuc3VyZ2Uuc2gv\">ahooks</span> 的  <code>useRequest</code>  提供了一套统一的网络请求和错误处理方案。</p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"运行时配置\"><a class=\"markdownIt-Anchor\" href=\"#运行时配置\">#</a> 运行时配置</h3>\n<p>在  <code>src/app.ts</code>  中你可以通过配置 request 项，来为你的项目进行统一的个性化的请求设定。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">RequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">request</span>: <span class=\"title class_\">RequestConfig</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,  </span><br><span class=\"line\">    <span class=\"comment\">// other axios options you want</span></span><br><span class=\"line\">    <span class=\"attr\">errorConfig</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">errorHandler</span>(<span class=\"params\"></span>)&#123;    &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">errorThrower</span>(<span class=\"params\"></span>)&#123;    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">requestInterceptors</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">responseInterceptors</span>: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"errorconfig\"><a class=\"markdownIt-Anchor\" href=\"#errorconfig\">#</a> errorConfig</h4>\n<p>如果你想要为自己的请求设定统一的错误处理方案，可以在这里进行配置。</p>\n<p>其中  <code>errorThrower</code>  接收你后端返回的数据并且需要抛出一个你自己设定的 error， 你可以在这里根据后端的数据进行一定的处理。</p>\n<p>我们的  <code>request</code>  会 catch  <code>errorThrower</code>  抛出的错误，并且执行你的  <code>errorHandler</code>  方法，该方法接收两个参数，第一个参数是 catch 到的 error，第二个参数则是 request 的 opts。</p>\n<p>这里面的  <code>errorHandler</code>  和  <code>errorThrower</code>  需要配套使用。文档的末尾有一个完整的例子。</p>\n<p>如果你觉得这种方式进行错误处理过于繁琐，可以直接在拦截器中实现自己的错误处理。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./request&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 错误处理方案： 错误类型</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ErrorShowType</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">SILENT</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">WARN_MESSAGE</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">ERROR_MESSAGE</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">NOTIFICATION</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">REDIRECT</span> = <span class=\"number\">9</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 与后端约定的响应数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ResponseStructure</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">success</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  errorCode?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  errorMessage?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  showType?: <span class=\"title class_\">ErrorShowType</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 运行时配置</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">request</span>: <span class=\"title class_\">RequestConfig</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 统一的请求设定</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Requested-With&#x27;</span>: <span class=\"string\">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 错误处理： umi@3 的错误处理方案。</span></span><br><span class=\"line\">  <span class=\"attr\">errorConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛出</span></span><br><span class=\"line\">    <span class=\"attr\">errorThrower</span>: <span class=\"function\">(<span class=\"params\">res: ResponseStructure</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; success, data, errorCode, errorMessage, showType &#125; = res;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">error</span>: <span class=\"built_in\">any</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(errorMessage);</span><br><span class=\"line\">        error.<span class=\"property\">name</span> = <span class=\"string\">&#x27;BizError&#x27;</span>;</span><br><span class=\"line\">        error.<span class=\"property\">info</span> = &#123; errorCode, errorMessage, showType, data &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error; <span class=\"comment\">// 抛出自制的错误</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 错误接收及处理</span></span><br><span class=\"line\">    <span class=\"attr\">errorHandler</span>: <span class=\"function\">(<span class=\"params\">error: <span class=\"built_in\">any</span>, opts: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (opts?.<span class=\"property\">skipErrorHandler</span>) <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">      <span class=\"comment\">// 我们的 errorThrower 抛出的错误。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error.<span class=\"property\">name</span> === <span class=\"string\">&#x27;BizError&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">errorInfo</span>: <span class=\"title class_\">ResponseStructure</span> | <span class=\"literal\">undefined</span> = error.<span class=\"property\">info</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (errorInfo) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> &#123; errorMessage, errorCode &#125; = errorInfo;</span><br><span class=\"line\">          <span class=\"keyword\">switch</span> (errorInfo.<span class=\"property\">showType</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ErrorShowType</span>.<span class=\"property\">SILENT</span>:</span><br><span class=\"line\">              <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ErrorShowType</span>.<span class=\"property\">WARN_MESSAGE</span>:</span><br><span class=\"line\">              message.<span class=\"title function_\">warn</span>(errorMessage);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ErrorShowType</span>.<span class=\"property\">ERROR_MESSAGE</span>:</span><br><span class=\"line\">              message.<span class=\"title function_\">error</span>(errorMessage);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ErrorShowType</span>.<span class=\"property\">NOTIFICATION</span>:</span><br><span class=\"line\">              notification.<span class=\"title function_\">open</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">description</span>: errorMessage,</span><br><span class=\"line\">                <span class=\"attr\">message</span>: errorCode,</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ErrorShowType</span>.<span class=\"property\">REDIRECT</span>:</span><br><span class=\"line\">              <span class=\"comment\">// <span class=\"doctag\">TODO:</span> redirect</span></span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">              message.<span class=\"title function_\">error</span>(errorMessage);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error.<span class=\"property\">response</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Axios 的错误</span></span><br><span class=\"line\">        <span class=\"comment\">// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围</span></span><br><span class=\"line\">        message.<span class=\"title function_\">error</span>(<span class=\"string\">`Response status:<span class=\"subst\">$&#123;error.response.status&#125;</span>`</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error.<span class=\"property\">request</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求已经成功发起，但没有收到响应</span></span><br><span class=\"line\">        <span class=\"comment\">// \\`error.request\\` 在浏览器中是 XMLHttpRequest 的实例，</span></span><br><span class=\"line\">        <span class=\"comment\">// 而在node.js中是 http.ClientRequest 的实例</span></span><br><span class=\"line\">        message.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;None response! Please retry.&#x27;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送请求时出了点问题</span></span><br><span class=\"line\">        message.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Request error, please retry.&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">  <span class=\"attr\">requestInterceptors</span>: [</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拦截请求配置，进行个性化处理。</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> url = config.<span class=\"property\">url</span>.<span class=\"title function_\">concat</span>(<span class=\"string\">&#x27;?token = 123&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...config, url&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">  <span class=\"attr\">responseInterceptors</span>: [</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 拦截响应数据，进行个性化处理</span></span><br><span class=\"line\">       <span class=\"keyword\">const</span> &#123; data &#125; = response;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!data.<span class=\"property\">success</span>)&#123;</span><br><span class=\"line\">         message.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;请求失败！&#x27;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"权限\"><a class=\"markdownIt-Anchor\" href=\"#权限\">#</a> 权限</h2>\n<p>配置开启。同时需要  <code>src/access.ts</code>  提供权限配置。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//src/app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">access</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// access 插件依赖 initial State 所以需要同时开启</span></span><br><span class=\"line\">  <span class=\"attr\">initialState</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们约定了  <code>src/access.ts</code>  为我们的权限定义文件，该文件需要默认导出一个方法，导出的方法会在项目初始化时被执行。该方法需要返回一个对象，对象的每一个值就对应定义了一条权限。如下所示：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/access.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//initialState是全局初始状态的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; userId, role &#125; = initialState;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//可读权限</span></span><br><span class=\"line\">    <span class=\"attr\">canReadFoo</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">//可更新权限</span></span><br><span class=\"line\">    <span class=\"attr\">canUpdateFoo</span>: role === <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">//可删除权限</span></span><br><span class=\"line\">    <span class=\"attr\">canDeleteFoo</span>: <span class=\"function\">(<span class=\"params\">foo</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> foo.<span class=\"property\">ownerId</span> === userId;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"useaccess\"><a class=\"markdownIt-Anchor\" href=\"#useaccess\">#</a> useAccess</h3>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useAccess &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">PageA</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; foo &#125; = props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> access = <span class=\"title function_\">useAccess</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (access.<span class=\"property\">canReadFoo</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果可以读取 Foo，则...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>TODO<span class=\"tag\">&lt;/&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">PageA</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"access\"><a class=\"markdownIt-Anchor\" href=\"#access\">#</a> Access</h3>\n<p>可以在业务组件中使用插件提供的 React hook  <code>useAccess</code>  以及组件  <code>&lt;Access /&gt;</code>  对应用进行权限控制了。组件  <code>Access</code>  支持的属性如下：</p>\n<h4 id=\"accessible\"><a class=\"markdownIt-Anchor\" href=\"#accessible\">#</a> accessible</h4>\n<ul>\n<li>Type:  <code>boolean</code></li>\n</ul>\n<p>是否有权限，通常通过  <code>useAccess</code>  获取后传入进来。</p>\n<h4 id=\"fallback\"><a class=\"markdownIt-Anchor\" href=\"#fallback\">#</a> fallback</h4>\n<ul>\n<li>Type:  <code>React.ReactNode</code></li>\n</ul>\n<p>无权限时的显示，默认无权限不显示任何内容。</p>\n<h3 id=\"children\"><a class=\"markdownIt-Anchor\" href=\"#children\">#</a> children</h3>\n<ul>\n<li>Type:  <code>React.ReactNode</code></li>\n</ul>\n<p>有权限时的显示。</p>\n<p>完整示例如下：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useAccess, <span class=\"title class_\">Access</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">PageA</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; foo &#125; = props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> access = <span class=\"title function_\">useAccess</span>(); <span class=\"comment\">// access 的成员: canReadFoo, canUpdateFoo, canDeleteFoo</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (access.<span class=\"property\">canReadFoo</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果可以读取 Foo，则...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Access</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">accessible</span>=<span class=\"string\">&#123;access.canReadFoo&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">fallback</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">div</span>&gt;</span>Can not read foo content.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Foo content.</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Access</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Access</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">accessible</span>=<span class=\"string\">&#123;access.canUpdateFoo&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">fallback</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">div</span>&gt;</span>Can not update foo.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Update foo.</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Access</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Access</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">accessible</span>=<span class=\"string\">&#123;access.canDeleteFoo(foo)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">fallback</span>=<span class=\"string\">&#123;</span>&lt;<span class=\"attr\">div</span>&gt;</span>Can not delete foo.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Delete foo.</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Access</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dva\"><a class=\"markdownIt-Anchor\" href=\"#dva\">#</a> dva</h2>\n<p><strong>参考：</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; queryUsers, queryUser &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../services/user&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">user</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">effects</span>: &#123;</span><br><span class=\"line\">    *<span class=\"title function_\">queryUser</span>(<span class=\"params\">&#123; payload &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">yield</span> <span class=\"title function_\">call</span>(queryUser, payload);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"title function_\">put</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;queryUserSuccess&#x27;</span>, <span class=\"attr\">payload</span>: data &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queryUserSuccess</span>(<span class=\"params\">state, &#123; payload &#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        <span class=\"attr\">user</span>: payload,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"title function_\">test</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/15/UmiJS%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2023/05/15/UmiJS%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/",
            "title": "UmiJS完全指南",
            "date_published": "2023-05-15T13:35:46.257Z",
            "content_html": "<h2 id=\"启动项目\"><a class=\"markdownIt-Anchor\" href=\"#启动项目\">#</a> 启动项目</h2>\n<p>文档地址 https://v3.umijs.org/zh-CN/docs/mock</p>\n<p>创建目录</p>\n<p>然后 <code>pnpm dlx create-umi@latest</code></p>\n<p>然后 <code>yarn</code>  安装相关依赖</p>\n<p><code>yarn start</code>  启动项目</p>\n<h2 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\">#</a> 目录结构</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── package.json</span><br><span class=\"line\">├── .umirc.ts</span><br><span class=\"line\">├── .env</span><br><span class=\"line\">├── dist</span><br><span class=\"line\">├── mock</span><br><span class=\"line\">├── public</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── .umi</span><br><span class=\"line\">    ├── layouts/index.tsx</span><br><span class=\"line\">    ├── pages</span><br><span class=\"line\">        ├── index.less</span><br><span class=\"line\">        └── index.tsx</span><br><span class=\"line\">    └── app.ts</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>Umi 在  <code>.umirc.ts</code>  或  <code>config/config.ts</code>  中配置项目和插件，支持 es6。一份常见的配置如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> default &#123;</span><br><span class=\"line\">  base: <span class=\"string\">&#x27;/docs/&#x27;</span>,</span><br><span class=\"line\">  publicPath: <span class=\"string\">&#x27;/static/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">hash</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"built_in\">history</span>: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;hash&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typescript-提示\"><a class=\"markdownIt-Anchor\" href=\"#typescript-提示\">#</a> TypeScript 提示</h3>\n<p>如果你想在写配置时也有提示，可以通过 umi 的  <code>defineConfig</code>  方法定义配置，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;  <span class=\"attr\">routes</span>: [    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;@/pages/index&#x27;</span> &#125;,  ],&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行时配置\"><a class=\"markdownIt-Anchor\" href=\"#运行时配置\">#</a> 运行时配置</h2>\n<p>运行时配置和配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、jsx、import 浏览器端依赖等等，注意不要引入 node 依赖。</p>\n<p>约定  <code>src/app.tsx</code>  为运行时配置。</p>\n<h2 id=\"路由\"><a class=\"markdownIt-Anchor\" href=\"#路由\">#</a> 路由</h2>\n<p>在<strong>配置文件</strong>中通过  <code>routes</code>  进行配置，格式为路由信息的数组。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">exact</span>: <span class=\"literal\">true</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;index&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">exact</span>: <span class=\"literal\">true</span>, <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;user&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置子路由\"><a class=\"markdownIt-Anchor\" href=\"#配置子路由\">#</a> 配置子路由</h3>\n<p>配置子路由，通常在需要为多个路径增加 layout 组件时使用。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/login&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;login&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: <span class=\"string\">&#x27;@/layouts/index&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;list&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;list&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">      <span class=\"comment\">//404路由</span></span><br><span class=\"line\">     &#123; <span class=\"attr\">component</span>: <span class=\"string\">&#x27;@/pages/404&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在  <code>src/layouts/index</code>  中通过  <code>props.children</code>  渲染子路由，</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在全局布局 src/layouts/index 中，通过 &lt;<span class=\"title class_\">Outlet</span>/&gt; 来渲染子路由：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">padding:</span> <span class=\"attr\">20</span> &#125;&#125;&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Outlet</span>/&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，访问  <code>/list</code>  和  <code>/admin</code>  就会带上  <code>src/layouts/index</code>  这个 layout 组件。</p>\n<h3 id=\"路由跳转\"><a class=\"markdownIt-Anchor\" href=\"#路由跳转\">#</a> 路由跳转</h3>\n<h3 id=\"redirect\"><a class=\"markdownIt-Anchor\" href=\"#redirect\">#</a> redirect</h3>\n<ul>\n<li>Type:  <code>string</code></li>\n</ul>\n<p>配置路由跳转。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; </span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [    </span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/list&#x27;</span> &#125;,  </span><br><span class=\"line\">             &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/list&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;list&#x27;</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问  <code>/</code>  会跳转到  <code>/list</code> ，并由  <code>src/pages/list</code>  文件进行渲染。</p>\n<h3 id=\"权限路由\"><a class=\"markdownIt-Anchor\" href=\"#权限路由\">#</a> 权限路由</h3>\n<h3 id=\"wrappers\"><a class=\"markdownIt-Anchor\" href=\"#wrappers\">#</a> wrappers</h3>\n<ul>\n<li>Type:  <code>string[]</code></li>\n</ul>\n<p>配置路由组件的包装组件，通过包装组件可以为当前的路由组件组合进更多的功能。 比如，可以用于路由级别的权限校验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">wrappers</span>: [ </span><br><span class=\"line\">             <span class=\"string\">&#x27;@/wrappers/auth&#x27;</span>,</span><br><span class=\"line\">         ],   </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/login&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;login&#x27;</span> &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在  <code>src/wrappers/auth</code>  中，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Navigate</span>, <span class=\"title class_\">Outlet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (props) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isLogin &#125; = <span class=\"title function_\">useAuth</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLogin) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Outlet</span> /&gt;</span></span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/login&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，访问  <code>/user</code> ，就通过  <code>auth</code>  组件做权限校验，如果通过，渲染  <code>src/pages/user</code> ，否则跳转到  <code>/login</code> 。</p>\n<p><code>wrappers</code>  中的每个组件会给当前的路由组件增加一层嵌套路由，如果你希望路由结构不发生变化，推荐使用高阶组件。先在高阶组件中实现 wrapper 中的逻辑，然后使用该高阶组件装饰对应的路由组件。</p>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/hocs/withAuth.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Navigate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">withAuth</span> = (<span class=\"params\">Component</span>) =&gt; <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; isLogin &#125; = <span class=\"title function_\">useAuth</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLogin) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Navigate</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/login&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/pages/user.tsx</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">TheOldPage</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withAuth</span>(<span class=\"title class_\">TheOldPage</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态路由\"><a class=\"markdownIt-Anchor\" href=\"#动态路由\">#</a> 动态路由</h3>\n<p>约定，带  <code>$</code>  前缀的目录或文件为动态路由。若  <code>$</code>  后不指定参数名，则代表  <code>*</code>  通配，比如以下目录结构：</p>\n<p>比如：</p>\n<ul>\n<li><code>src/pages/users/$id.tsx</code>  会成为  <code>/users/:id</code></li>\n<li><code>src/pages/users/$id/settings.tsx</code>  会成为  <code>/users/:id/settings</code></li>\n</ul>\n<h3 id=\"404-路由\"><a class=\"markdownIt-Anchor\" href=\"#404-路由\">#</a> 404 路由</h3>\n<p>约定  <code>src/pages/404.tsx</code>  为 404 页面，需返回 React 组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/*&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;@/pages/404&#x27;</span> &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由数据加载\"><a class=\"markdownIt-Anchor\" href=\"#路由数据加载\">#</a> 路由数据加载</h3>\n<p>Umi 提供了开箱即用的数据预加载方案，能够解决在多层嵌套路由下，页面组件和数据依赖的瀑布流请求。Umi 会自动根据当前路由或准备跳转的路由，并行地发起他们的数据请求，因此当路由组件加载完成后，已经有马上可以使用的数据了。</p>\n<h3 id=\"启用方式\"><a class=\"markdownIt-Anchor\" href=\"#启用方式\">#</a> 启用方式</h3>\n<p>配置开启：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .umirc.ts export default &#123;  clientLoader: &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方式\"><a class=\"markdownIt-Anchor\" href=\"#使用方式\">#</a> 使用方式</h3>\n<p>在路由文件中，除了默认导出的页面组件外，再导出一个  <code>clientLoader</code>  函数，并且在该函数内完成路由数据加载的逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pages/.../some_page.tsx </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useClientLoaderData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">SomePage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"title function_\">useClientLoaderData</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;data&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">clientLoader</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码，在  <code>clientLoader</code>  函数返回的数据，可以在组件内调用  <code>useClientLoaderData</code>  获取。</p>\n<h2 id=\"页面跳转\"><a class=\"markdownIt-Anchor\" href=\"#页面跳转\">#</a> 页面跳转</h2>\n<h3 id=\"声明式\"><a class=\"markdownIt-Anchor\" href=\"#声明式\">#</a> 声明式</h3>\n<p>通过 Link 使用，通常作为 React 组件使用。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Link</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/list&quot;</span>&gt;</span>Go to list page<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令式\"><a class=\"markdownIt-Anchor\" href=\"#命令式\">#</a> 命令式</h3>\n<p>通过 history 使用，通常在事件处理中被调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; history &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">goToListPage</span>(<span class=\"params\"></span>) &#123;  history.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/list&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以直接从组件的属性中取得 history</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (props) =&gt; (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span>=&gt;</span>props.history.push(&#x27;/list&#x27;);&#125;&gt;Go to list page<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>组件内部还可使用 <code>useNavigate</code></p>\n<h2 id=\"html模板\"><a class=\"markdownIt-Anchor\" href=\"#html模板\">#</a> html 模板</h2>\n<h3 id=\"修改默认模板\"><a class=\"markdownIt-Anchor\" href=\"#修改默认模板\">#</a> 修改默认模板</h3>\n<p>新建  <code>src/pages/document.ejs</code> ，umi 约定如果这个文件存在，会作为默认模板，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Your App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 umi 里配置 title 请查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92My51bWlqcy5vcmcvemgtQ04vY29uZmlnI3RpdGxl\">配置标题</span>。</p>\n<h2 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\">#</a> 样式</h2>\n<h3 id=\"全局样式\"><a class=\"markdownIt-Anchor\" href=\"#全局样式\">#</a> 全局样式</h3>\n<p>Umi 中约定  <code>src/global.css</code>  为全局样式，如果存在此文件，会被自动引入到入口文件最前面。</p>\n<p>比如用于覆盖样式，</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ant-select-selection</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">51px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动识别css-modules\"><a class=\"markdownIt-Anchor\" href=\"#自动识别css-modules\">#</a> 自动识别 CSS Modules</h3>\n<p>Umi 会自动识别 CSS Modules 的使用，你把他当做 CSS Modules 用时才是 CSS Modules。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CSS Modulesimport styles from &#x27;./foo.css&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// 非 CSS Modulesimport &#x27;./foo.css&#x27;;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用图片\"><a class=\"markdownIt-Anchor\" href=\"#使用图片\">#</a> 使用图片</h2>\n<h3 id=\"js-里使用图片\"><a class=\"markdownIt-Anchor\" href=\"#js-里使用图片\">#</a> JS 里使用图片</h3>\n<p>通过 require 引用相对路径的图片。</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;require(</span>&#x27;<span class=\"attr\">.</span>/<span class=\"attr\">foo.png</span>&#x27;)&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>支持别名，比如通过  <code>@</code>  指向 src 目录：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;require(</span>&#x27;@/<span class=\"attr\">foo.png</span>&#x27;)&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"js-里使用svg\"><a class=\"markdownIt-Anchor\" href=\"#js-里使用svg\">#</a> JS 里使用 svg</h3>\n<p><strong>组件式引入</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactComponent</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Logo</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./logo.svg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Analysis</span>(<span class=\"params\"></span>) &#123;  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Logo</span> <span class=\"attr\">width</span>=<span class=\"string\">&#123;90&#125;</span> <span class=\"attr\">height</span>=<span class=\"string\">&#123;120&#125;</span> /&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>url 式引入</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logoSrc <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./logo.svg&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Analysis</span>(<span class=\"params\"></span>) &#123;  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;logoSrc&#125;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;logo&quot;</span> /&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"css-里使用图片\"><a class=\"markdownIt-Anchor\" href=\"#css-里使用图片\">#</a> CSS 里使用图片</h3>\n<p>通过相对路径引用。</p>\n<p>比如，</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">./foo.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS 里也支持别名，但需要在前面加  <code>~</code>  前缀，</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">~@/foo.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按需加载\"><a class=\"markdownIt-Anchor\" href=\"#按需加载\">#</a> 按需加载</h2>\n<h3 id=\"启用按需加载\"><a class=\"markdownIt-Anchor\" href=\"#启用按需加载\">#</a> 启用按需加载</h3>\n<p><strong>常见使用场景</strong>：组件体积太大，不适合直接计入 bundle 中，以免影响首屏加载速度。例如：某组件 HugeA 包含巨大的实现 / 依赖了巨大的三方库，且该组件 HugeA 的使用不在首屏显示范围内，可被单独拆出。这时候， <code>dynamic</code>  就该上场了。</p>\n<p>为了简化部署成本，按需加载功能默认是关闭的，你需要在使用之前先通过配置开启，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">dynamicImport</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用按需加载\"><a class=\"markdownIt-Anchor\" href=\"#使用按需加载\">#</a> 使用按需加载</h3>\n<p><strong>封装一个异步组件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; dynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">dynamic</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里的注释 webpackChunkName 可以指导 webpack 将该组件 HugeA 以这个名字单独拆出去</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">default</span>: <span class=\"title class_\">HugeA</span> &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: </span></span><br><span class=\"line\"><span class=\"comment\">    &quot;external_A&quot; */</span> <span class=\"string\">&#x27;./HugeA&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">HugeA</span>;  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>使用异步组件</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;<span class=\"keyword\">import</span> <span class=\"title class_\">AsyncHugeA</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./AsyncHugeA&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 像使用普通组件一样即可</span></span><br><span class=\"line\"><span class=\"comment\">// dynamic 为你做:</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 异步加载该模块的 bundle</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 加载期间 显示 loading（可定制）</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 异步组件加载完毕后，显示异步组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AsyncHugeA</span> /&gt;</span></span>;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插件\"><a class=\"markdownIt-Anchor\" href=\"#插件\">#</a> 插件</h2>\n<p>在普通的 Umi 应用中，默认 <strong>不附带任何插件</strong> ，如需使用 Max 的功能（如 数据流、antd 等），需要手动安装插件并开启他们：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D @umijs/plugins</span><br></pre></td></tr></table></figure>\n<p>如开启 antd 插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .umirc.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;@umijs/plugins/dist/antd&#x27;</span></span><br><span class=\"line\">], </span><br><span class=\"line\">    <span class=\"attr\">antd</span>: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\">#</a> API</h2>\n<h3 id=\"helmet\"><a class=\"markdownIt-Anchor\" href=\"#helmet\">#</a> Helmet</h3>\n<p>用于在页面中<strong>动态配置</strong>  <code>head</code>  中的标签，例如  <code>title</code></p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Helmet</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Helmet</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Helmet</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"history\"><a class=\"markdownIt-Anchor\" href=\"#history\">#</a> history</h3>\n<p>和 history 相关的操作，用于获取当前路由信息、执行路由跳转、监听路由变更。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 建议组件或 hooks 里用 useLocation 取</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useLocation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> location = <span class=\"title function_\">useLocation</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     &#123; location.pathname &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">     &#123; location.search &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">     &#123; location.hash &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转到指定路由</span></span><br><span class=\"line\">history.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/list&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 带参数跳转到指定路由</span></span><br><span class=\"line\">history.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/list?a=b&amp;c=d#anchor&#x27;</span>, state);</span><br><span class=\"line\">history.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">pathname</span>: <span class=\"string\">&#x27;/list&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">search</span>: <span class=\"string\">&#x27;?a=b&amp;c=d&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hash</span>: <span class=\"string\">&#x27;anchor&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">some</span>: <span class=\"string\">&#x27;state-data&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 跳转当前路径，并刷新 state</span></span><br><span class=\"line\">history.<span class=\"title function_\">push</span>(&#123;&#125;, state)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 跳转到上一个路由</span></span><br><span class=\"line\">history.<span class=\"title function_\">back</span>();</span><br><span class=\"line\">history.<span class=\"title function_\">go</span>(-<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"link\"><a class=\"markdownIt-Anchor\" href=\"#link\">#</a> Link</h3>\n<p><code>&lt;Link&gt;</code>  是 React 组件，是带路由跳转功能的  <code>&lt;a&gt;</code>  元素。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Link</span>(<span class=\"params\">props: &#123;</span></span><br><span class=\"line\"><span class=\"params\">  prefetch?: <span class=\"built_in\">boolean</span>;</span></span><br><span class=\"line\"><span class=\"params\">  to: <span class=\"built_in\">string</span> | Partial&lt;&#123; pathname: <span class=\"built_in\">string</span>; search: <span class=\"built_in\">string</span>; hash: <span class=\"built_in\">string</span> &#125;&gt;;</span></span><br><span class=\"line\"><span class=\"params\">  replace?: <span class=\"built_in\">boolean</span>;</span></span><br><span class=\"line\"><span class=\"params\">  state?: <span class=\"built_in\">boolean</span>;</span></span><br><span class=\"line\"><span class=\"params\">  reloadDocument?: <span class=\"built_in\">boolean</span>;</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>): <span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Link</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">IndexPage</span>(<span class=\"params\">&#123; user &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">to</span>=<span class=\"string\">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若开启了  <code>prefetch</code>  则当用户将鼠标放到该组件上方时，Umi 就会自动开始进行跳转路由的组件 js 文件和数据预加载。</p>\n<h3 id=\"usenavigate\"><a class=\"markdownIt-Anchor\" href=\"#usenavigate\">#</a> useNavigate</h3>\n<p><code>useNavigate</code>  钩子函数返回一个可以控制跳转的函数；比如可以用在提交完表单后跳转到其他页面。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> navigate = <span class=\"title function_\">useNavigate</span>();</span><br><span class=\"line\"><span class=\"title function_\">navigate</span>(<span class=\"string\">&quot;../success&quot;</span>, &#123; <span class=\"attr\">replace</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>返回上一页</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> navigate = <span class=\"title function_\">useNavigate</span>();</span><br><span class=\"line\"><span class=\"title function_\">navigate</span>(-<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"useroutes\"><a class=\"markdownIt-Anchor\" href=\"#useroutes\">#</a> useRoutes</h3>\n<p><code>useRoutes</code>  渲染路由的钩子函数，传入路由配置和可选参数  <code>location</code> , 即可得到渲染结果；如果没有匹配的路由，结果为  <code>null</code> 。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRoutes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;umi&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> element = <span class=\"title function_\">useRoutes</span>([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Dashboard</span> /&gt;</span></span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">path</span>: <span class=\"string\">&quot;messages&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DashboardMessages</span> /&gt;</span></span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;tasks&quot;</span>, <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">DashboardTasks</span> /&gt;</span></span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;team&quot;</span>, <span class=\"attr\">element</span>: <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AboutPage</span> /&gt;</span></span> &#125;,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}